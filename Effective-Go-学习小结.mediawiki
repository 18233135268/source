=Format（格式化）=
Go语言中主要让机器来处理格式化的问题：gofmt 程序（也可用 go fmt，它以包为处理对象而非源文件），它将Go程序按照标准风格缩进、 对齐，保留注释并在需要时重新格式化.

gofmt可以帮你将结构体中的字段注释对齐，例如：
    type T struct {
        name string // 对象名
        value int // 对象值
    }
gofmt 会将它按列对齐为：
    type T struct {
        name    string // 对象名
        value   int    // 对象值
    }
缩进默认使用tab，必要时候再使用空格.

括号用的更少，比如控制流语句（for，if，switch）并不需要圆括号.

优先级的操作也变得更简洁，例如：
    X<<8 + Y<<16
空格符就起作用了.
----
=Commentary（注释）=
可以使用“//”对行进行注释，也可以使用“/* */”对块进行注释.

godoc既是一个程序，又是一个Web服务器，它对Go的源码进行处理，并提取包中的文档内容，出现在顶级声明之前，且与该声明之间没有空行的注释，将与该声明一起被提取出来，作为该条目的说明文，这些注释的类型和风格决定了 godoc 生成的文档质量.

每个包都应包含一段包注释，即放置在包子句前的一个块注释。对于包含多个文件的包， 包注释只需出现在其中的任一文件中即可。包注释应在整体上对该包进行介绍，并提供包的相关信息。它将出现在 godoc 页面中的最上面，并为紧随其后的内容建立详细的文档.

在程序中，每个可导出（首字母大写）的名称都应该有文档注释，而且最好是完整的句子，第一句应当以被声明的东西开头，并且是单句的摘要，例如：
    // Compile parses a regular expression and returns, if successful,
    // a Regexp that can be used to match against text.
    func Compile(str string) (*Regexp, error) {
----
=Names=

某个名称在包外是否可见，取决于其首个字符是否为大写字母.

==Package names==

不能使用import.的记法.

命名要简短又清晰，长命名并不会使其更具可读性.

==Getter==

Go并不对getter（获取器）和setter（设置器）提供自动支持，因此我们得自己提供.

==驼峰式记法==

Go中约定使用驼峰记法：MixedCaps 或 mixedCaps
----
=Semicolon（分号）=

Go的正式语法使用分号来结束语句，但是这些分号并不在源码中出现.

通常Go程序只在诸如for循环语句这样的地方使用分号，以此来将初始化器、条件及增量元素分开.

如果你在一行中写多个语句，也需要用分号隔开.

你都不应将一个控制结构（if、for、switch 或 select）的左大括号放在下一行，但如果要这样子，就要在大括号前加一个分号，但是这样子可能会引起不必要的效果，所以应该这样子写：
    if i < f() {
        g()
    }
----
=Control structures(控制结构)=

Go不再使用 do 或 while 循环.

没有圆括号，但是主体必须始终使用大括号括住.

==Redeclaration and reassignment（重新声明和再次赋值）==

如果重新声明变量时与已声明的处于同一作用域中，则此变量只是被重新赋值了，若变量已在外层作用域中声明过，则此次声明会创建一个新的变量.
在初始化中与其类型相应的值才能赋予变量.

即便Go中的函数形参和返回值在词法上处于大括号之外，它们的作用域和该函数体仍然相同.

==For==
有++、--这两个运算符，但是在for循环中，若想要使用多个变量，应采用平行赋值的方式，因为它会拒绝++和--，例如：
    // 反转 a
    for i, j := 0, len(a)-1; i < j; i, j = i+1, j-1 {
        a[i], a[j] = a[j], a[i]
    }

==Switch==

switch并不会自动下溯，但case可通过逗号分隔来列举相同的处理条件，例如：
    func shouldEscape(c byte) bool {
        switch c {
            case ' ', '?', '&', '=', '#', '+', '%':
            return true
        }
        return fals
    }
----
=Function=
==Multiple return values（多个返回值）==

Go的函数和方法可返回多个值，可以将错误值返回（例如用 -1 表示 EOF）、修改通过地址传入的实参.

==Named result parameters（可命名结果形参）==

当函数命名参数后，一旦函数开始执行，他们会被初始化成与其类型相对应的零值；若该函数执行了一条不带实参的return语句，则就会返回参数的当前值.

==Defer==

被推迟函数的实参在推迟执行时就会求值，而不是在调用执行时才求值，被推迟的函数按照后进先出（LIFO）的顺序执行，例如以下两个例子：
    for i := 0; i < 5; i++ {
        defer fmt.Printf("%d ", i)
    } //输出：4 3 2 1 0，而不是0 1 2 3 4.
    func trace(s string) string {
        fmt.Println("entering:", s)
        return s
    }
    func un(s string) {
        fmt.Println("leaving:", s)
    }
    func a() {
        defer un(trace("a"))
        fmt.Println("in a")
    }
    func b() {
        defer un(trace("b"))
        fmt.Println("in b")
        a()
    }
    func main() {
        b()
    }
将会输出：
    entering: b
    in b
    entering: a
    in a
    leaving: a
    leaving: b
=Data（数据）=
==New分配==

Go里面有两个分配原语：new和make.它们做的事情不同，所应用的类型也不同.

New是用来分配内存的内置函数，但是不能初始化内存，只能将内存置零.例如：new（T）会为类型为T的新的一项分配值为0的内存空间，并返回它的地址，即类型为*T的值.

==构造函数和复合字面==

有时候零值还不够好，这时候就需要初始化器，正如下面这段来自os包中的代码：
    func NewFile(fd int, name string) *File {
        if fd < 0 {
            return nil
        }
        f := new(File)
        f.fd = fd
        f.name = name
        f.dirinfo = nil
        f.nepipe = 0
        return f
    }
但是这样子就显得复杂，这时候就可以使用复合字面来简化它：
    func NewFile(fd int, name string) *File {
        if fd < 0 {
            return nil
        }
        f := File{fd, name, nil, 0}
        return &f
    }
再简单点，就可以把后两行合并成：
    return &File{fd, name, nil, 0}

如果以字段:值对的形式，初始化字段时就可以按任何顺序出现，但未给出的字段值将赋予零值，例如：
    return &File{fd: fd, name: name}
==make分配==

与new不同，make 用于初始化其内部的数据结构并准备好将要使用的值，而返回的是类型为T（注意：而非*T）的一个已初始化（注意：而非置零）的值，例如：
    make([]int, 10, 100)
会分配一个具有100个 int 的数组空间，接着创建一个长度为10， 容量为100并指向该数组中前10个元素的切片结构，生成切片时，其容量可以省略.

而new（[]int）则会返回一个指向新分配的，已置零的切片结构， 即一个指向nil切片值的指针.

由于make不能返回指针，如果想要得到指针，就得用new.

==Arrays（数组）==

数组是值，将一个数组赋值给另一个数组将会复制其所有元素.

如果数组作为参数传入某个函数，传入的是这个数组的拷贝，而不是这个数组的指针，但如果想提高效率，可以通过传入指向这个数组的指针来实现.

数组的大小是类型的一部分，比如：[10]int和[20]int是不同的.

==Slices（切片）==
切片保存了对底层数组的引用，如果你将某个切片赋予另一个切片，那么它们将会引用同一个数组.

如果某个函数带有切片参数，则对它的修改对调用者是可见的，就类似于传入了底层数组的指针.

切片的容量可通过内置函数cap获得，它将给出切片可以获得的最大长度.

==Maps（映射）==

map可以关联不同类型的值，只要key是支持相等性操作符的类型，如：整数、浮点数、复数、字符串、指针、接口（只要其动态类型支持相等性判断）、结构以及数组，但是切片不行.

与slice一样，map保存了对底层数据结构的引用.

如果将映射传入函数中，改变了映射的内容，则这些修改对调用者都是可见的.

构建映射时，键-值对之间用逗号隔开，例如：
    var timeZone = map[string]int{
        "UTC":  0*60*60,
        "EST": -5*60*60,
        "CST": -6*60*60,
        "MST": -7*60*60,
        "PST": -8*60*60,
    }
赋值与取值的语法类似于数组，不同的是映射的索引为key，而不是整数例如：
    offset := timeZone["EST"] //如果key不存在，则会返回该项类型所对应的零值.

删除映射中的某项，可使用delete函数，参数为映射和key，语法如下：
    delete(timeZone, "PDT")
即便key不存在，这个操作也是安全的.

==Print（打印）==

Go中Print函数位于fmt包，首字母大写，有：fmt.Printf、fmt.Fprintf，fmt.Sprintf等.

Println系列的函数还会在实参中插入空格，并在输出时追加一个换行，而 Print 版本仅在操作数两侧都没有字符串时才添加空白。以下示例中各行产生的输出都是一样的:
    fmt.Printf("Hello %d\n", 23)
    fmt.Fprint(os.Stdout, "Hello ", 23, "\n")
    fmt.Println("Hello", 23)
    fmt.Println(fmt.Sprint("Hello ", 23))
fmt.Fprint一类的格式化打印函数可接受任何实现了io.Writer接口的对象作为第一个实参.

如果只想要默认的转换，可以使用通用的格式 %v ，此外，这种格式还能打印数组、结构体或者映射，例如：
    fmt.Printf("%v\n", timeZone)  // 或只用 fmt.Println(timeZone)
输出：
    map[CST:-21600 PST:-28800 EST:-18000 UTC:0 MST:-25200]//顺序可能是任意的.

打印结构体时，%+v会为结构体的每个字段添上字段名，而另一种格式 %#v将完全按照Go的语法打印值，例如：
    type T struct {
        a int
        b float64
        c string
    }
    t := &T{ 7, -2.35, "abc\tdef" }
    fmt.Printf("%v\n", t)
    fmt.Printf("%+v\n", t)
    fmt.Printf("%#v\n", t)
    fmt.Printf("%#v\n", timeZone)
输出：
    &{7 -2.35 abc   def}
    &{a:7 b:-2.35 c:abc     def}
    &main.T{a:7, b:-2.35, c:"abc\tdef"}
    map[string] int{"CST":-21600, "PST":-28800, "EST":-18000, "UTC":0, "MST":-25200}

还有一种实用的格式是%T，它会打印某个值的类型，例如：
    fmt.Printf("%T\n", timeZone)
输出：
    map[string] int

如果想控制自定义类型的默认格式，只需要为该类型定义一个具有String() string 签名的方法，例如：
    t := &T{ 7, -2.35, "abc\tdef" }
    func (t *T) String() string {
        return fmt.Sprintf("%d/%g/%q", t.a, t.b, t.c)
    }
    fmt.Printf("%v\n", t)
输出：
    7/-2.35/"abc\tdef"

注意：请勿通过调用 Sprintf 来构造 String 方法，因为它会无限递归你的的 String 方法：
    type MyString string
    func (m MyString) String() string {
        return fmt.Sprintf("MyString=%s", m) // 错误：会无限递归
    }
要解决这个问题也很简单：将该实参转换为基本的字符串类型，而它没有这个方法.
    type MyString string
    func (m MyString) String() string {
        return fmt.Sprintf("MyString=%s", string(m)) // 可以：注意转换
    }
==Append（追加）==

append会在切片末尾追加元素并返回结果，例如：
    x := []int{1,2,3}
    x = append(x, 4, 5, 6)
    fmt.Println(x)
输出：
    [1,2,3,4,5,6]
如果要将一个切片追加到另一个切片中，就需要在调用的地方使用 ... ，例如：
    x := []int{1,2,3}
    y := []int{4,5,6}
    x = append(x, y...)
    fmt.Println(x)
输出也是：
    [1,2,3,4,5,6]
如果没有 ... ，它就会由于类型错误而无法编译，因为y不是int类型.
----
=Initialization（初始化）=
==Constents（常量）==

常量在编译时创建，所以定义它们的表达式必须是可被编译器求值的常量表达式，例如：1<<3就是一个常量表达式，而math.Sin(math.Pi/4)就不是，因为只有在运行的时候才会调用函数math.Sin.

Go中，枚举常量用枚举器iota创建.

==Variables（变量）==

变量的初始化与常量类似，但其初始值也可以是在运行时才被计算的一般表达式。
    var (
        home   = os.Getenv("HOME")
        user   = os.Getenv("USER")
        gopath = os.Getenv("GOPATH")
    )

==Init函数==

每个源文件都可以通过定义自己的无参数init函数来设置一些必要的状态，而它的结束就意味着初始化结束：只有该包中的所有变量声明都通过它们的初始化器求值后init才会被调用，而那些init只有在所有已导入的包都被初始化后才会被求值.

除了那些不能被表示成声明的初始化外，init函数还常被用在程序真正开始执行前，检验或校正程序的状态.
    func init() {
        if user == "" {
            log.Fatal("$USER not set")
        }
        if home == "" {
            home = "/home/" + user
        }
        if gopath == "" {
            gopath = home + "/go"
        }
        // gopath 可通过命令行中的 --gopath 标记覆盖掉.
        flag.StringVar(&gopath, "gopath", gopath, "override default GOPATH")
        }
----
=Methods（方法）=
==Pointers vs. Values（指针VS .值）==

方法定义任何已命名的类型，指针和接口除外，接收者不一定要是结构.

在之前讨论切片时，我们编写了一个 Append 函数，我们也可将其定义为切片的方法，为此，我们首先要声明一个已命名的类型来绑定该方法， 然后使该方法的接收者成为该类型的值.
    type ByteSlice []byte
    func (slice ByteSlice) Append(data []byte) []byte {
        // 主体和前面相同.
    }
但是这样子我们仍然需要返回更新后的切片，所以我们可通过重新定义该方法，将一个指向ByteSlice的指针作为该方法的接收者，这样该方法就能重写调用者提供的切片了.
    func (p *ByteSlice) Append(data []byte) {
        slice := *p
        // 主体和前面相同，但没有 return
        *p = slice
    }
其实可以更好，若我们将函数修改为与标准Write类似的方法，就像这样：
    func (p *ByteSlice) Write(data []byte) (n int, err error) {
        slice := *p
        // 依旧和前面相同.
        *p = slice
        return len(data), nil
    }
那么类型*ByteSlice就满足了标准的io.Writer接口，这将非常实用.

例如，我们可以通过打印将内容写入：
    var b ByteSlice
    fmt.Fprintf(&b, "This hour has %d days\n", 7)
我们将 ByteSlice 的地址传入，因为只有 *ByteSlice 才满足 io.Writer.

值方法可通过指针和值调用，而指针方法只能通过指针来调用.
----
=Interfaces and other types（接口和其他类型）=
==Interfaces（接口）==

Go中的接口为指定对象的行为提供了一种方法，例如：通过String方法可以自定义打印函，通过Write方法可以使Fprintf输出任何东西.

一种类型可以实现多个接口.
==Interface conversions and type assertions（接口转换和类型断言）==

类型选择是类型转换的一种形式：它接受一个接口，在选择（switch）中根据其判断选择对应的情况（case），并在某种意义上将其转换为该种类型.

以下代码为fmt.Printf通过类型选择将值转换为字符串的简化版，若它已经为字符串，我们需要该接口中实际的字符串值；若它有String方法，我们则需要调用该方法所得的结果.
    type Stringer interface {
        String() string
    }
    var value interface{} // Value provided by caller.
    switch str := value.(type) {
        case string: 
            return str  //获得具体的值.
        case Stringer:
            return str.String() //将该接口转换为另一个接口.
    }
但是如果我们只关心一种类型？如果我们知道该值拥有一个string而想要提取它？那么只需一种情况的类型选择就行，这时候就需要类型断言.

类型断言接受一个接口值， 并从中提取指定的明确类型的值，它需要一个明确的类型，而非type关键，例如：
    value.(typeName)
其结果则是拥有静态类型typeName的新值，该类型必须为该接口所拥有的具体类型， 或者该值可转换成的第二种接口类型，要提取我们知道在该值中的字符串，可以这样：
    str := value.(string) 
但若它所转换的值中不包含字符串，该程序就会以运行时错误崩溃。为避免这种情况， 需使用“, ok”的方法来测试它能安全地判断该值是否为字符串：
    str, ok := value.(string)
    if ok {
        fmt.Printf("字符串值为 %q\n", str)
    } else {
        fmt.Printf("该值非字符串\n")
    }
若类型断言失败，str 将继续存在且为字符串类型，但它将拥有零值，即空字符串.

而下面这个if-else语句，它等价于本节开头的类型选择：
    if str, ok := value.(string); ok {
        return str
    } else if str, ok := value.(Stringer); ok {
        return str.String()
    }

==Generality（通用性）==

如果一个类型只是为了实现一个接口，除了这个之外，没有导入其他方法，那么就无需导出这个类型，这也能避免为每个通用接口重复编写文档.

在这种情况下，构造函数应当返回一个接口的值而不是要实现的类型，比如，在hash库中，crc32.NewIEEE和adler32.New都返回接口类型hash.Hash32.

同样的方式能将crypto包中多种联系在一起的流密码算法与块密码分开。crypto/cipher包中的Block接口指定了块密码算法的行为，它为单独的数据块提供加密。接着，和bufio包类似，任何实现了该接口的密码包都能被用于构造以Stream为接口表示的流密码，而无需知道块加密的细节.crypto/cipher 接口看其来就像这样：
    type Block interface {
        BlockSize() int
        Encrypt(src, dst []byte)
        Decrypt(src, dst []byte)
    }
    type Stream interface {
        XORKeyStream(dst, src []byte)
    }
这是计数器模式CTR流的定义，它将块加密改为流加密，注意块加密的细节已被抽象化了.
    // NewCTR 返回一个 Stream，其加密/解密使用计数器模式中给定的 Block 进行.
    // iv 的长度必须与 Block 的块大小相同。
    func NewCTR(block Block, iv []byte) Stream
NewCTR的应用并不仅限于特定的加密算法和数据源，它适用于任何对Block接口和Stream的实现。因为它们返回接口值，所以用其它加密模式来代替CTR只需做局部的更改。构造函数的调用过程必须被修改，但由于其周围的代码只能将它看做Stream，因此它们不会注意到其中的区别.

==Interfaces and methods（接口与方法）==
下面这个例子是http包中定义的Handler接口，任何实现了Handler的对象都能够处理HTTP请求：
    type Handler interface {
        ServeHTTP(ResponseWriter, *Request)
    }
ResponseWriter接口提供了对方法的访问，这些方法需要响应客户端的请求.

为简单起见，我们忽略POST方法，并假设所有的HTTP请求都是GET方法，这种简化不会影响处理程序的建立方式，例如下面这个程序，它用于记录某个页面被访问的次数.
    // 简单的计数器服务.
    type Counter struct {
        n int
    }
    func (ctr *Counter) ServeHTTP(w http.ResponseWriter, req *http.Request) {
        ctr.n++
        fmt.Fprintf(w, "counter = %d\n", ctr.n)
    }
作为参考，下面这个程序展示了如何将这样一个服务器添加到URL树的一个节点上.
    import "net/http"
    ...
    ctr := new(Counter)
    http.Handle("/counter", ctr)
但为什么Counter要是结构体呢？一个整数就够了，接收者必须为指针，增量操作对于调用者才可见.
    // 简单的计数器服务
    type Counter int
    func (ctr *Counter) ServeHTTP(w http.ResponseWriter, req *http.Request) {
        *ctr++
        fmt.Fprintf(w, "counter = %d\n", *ctr)
    }
当页面被访问时，怎样通知你的程序去更新一些内部状态呢？这时候可以为Web页面绑定个channel.
    // 每次浏览时，这个channel都会发送一个通知.
    // （可能需要带缓冲的信道.）
    type Chan chan *http.Request
    func (ch Chan) ServeHTTP(w http.ResponseWriter, req *http.Request) {
        ch <- req
        fmt.Fprint(w, "notification sent")
    }
如果我们需要输出调用服务器二进制程序时使用的实参/args，写个打印实参的函数就行了.
    func ArgServer() {
        fmt.Println(os.Args)
    }
那我们该如何将它转换为HTTP服务器呢？我们可以将ArgServer实现为某种可忽略值的方法，但是还有更简单的方法，既然我们可以为除了指针和接口以外的任何类型定义一个方法，也能为一个函数写一个方法，例如，http包包含以下代码：
    // HandlerFunc 类型是一个适配器，它允许将普通函数用做HTTP处理程序.
    // 若 f 是个具有适当签名的函数，HandlerFunc(f) 就是个调用 f 的处理程序对象.
    type HandlerFunc func(ResponseWriter, *Request)
    // ServeHTTP调用f(c, req).
    func (f HandlerFunc) ServeHTTP(w ResponseWriter, req *Request) {
        f(w, req)
    }
HandlerFunc是个具有ServeHTTP方法的类型， 因此该类型的值就能处理HTTP请求。我们来看看该方法的实现：接收者是一个函数f，而该方法调用f。这可能看起来很奇怪，但其实不然，区别在于接收者变成了一个channel，而方法通过channel发送消息.

为了将ArgServer实现成HTTP服务器，首先我们得让它拥有合适的签名.
    // 实参服务器.
    func ArgServer(w http.ResponseWriter, req *http.Request) {
        fmt.Fprintln(w, os.Args)
    }
ArgServer和HandlerFunc现在拥有了相同的签名，因此我们可将其转换为这种类型来访问它的方法，正如我们将Sequence转换为IntSlice来访问IntSlice.Sort。建立它的代码非常简单：
    http.Handle("/args", http.HandlerFunc(ArgServer))
当有人访问/args页面时，安装到该页面的处理程序就有了值ArgServer和类型HandlerFunc。HTTP服务器会以ArgServer为接收者，调用该类型的ServeHTTP方法，它会反过来调用ArgServer（通过f(c, req)），接着实参就会显示出来.

在本节中，我们通过一个结构体，一个整数，一个channel和一个函数，建立了一个HTTP服务器， 这一切都是因为接口只是方法的集合，而几乎任何类型都能定义方法.
----
=The blank identifier（空白符）=

空白标识符可以被赋予或是被声明为任何类型的任何值，而值被无害地丢弃.这有点像Unix的/dev/null文件：它表示只写的值，在需要变量不需要实际的值的地方用作占位符.

==多重赋值中的空白标识符==

如果在一次赋值中需要赋多个值，但有一个在程序中不会用到，这时候就可以使用空格标识符来替代它，这样既可以避免创建无关的变量，又可以清楚地告知该值被丢弃了.例如，在调用一个返回值为一个值和错误的函数时，只有错误是重要的，这时候就可以用空格标识符来丢弃这个无关的值.
    if _, err := os.Stat(path); os.IsNotExist(err) {
        fmt.Printf("%s does not exist\n", path)
    }
但是，为了无视而丢弃错误值，这非常糟糕，务必检查错误的返回，因为它们会提供错误的理由.
    // 若路径不存在，它就会崩溃.
    fi, _ := os.Stat(path)
    if fi.IsDir() {
    fmt.Printf("%s is a directory\n", path)
    }

==Unused imports and variables（未使用的导入和变量）==

如果导入了一个包或者声明了一个变量，但没有使用它，系统就会报错.未使用的导入的包会使程序膨胀，并使编译变慢，一个已经初始化但是未使用的变量不仅会浪费计算能力，还可能隐藏更大的bug.这时候使用空格标识符就可以提供一个工作空间.

下面这个程序有两个未使用的导入（fmt和io）和一个未使用的变量（fd），所以他不会编译：
    package main
    import (
        "fmt"
        "io"
        "log"
        "os"
    )
    func main() {
    fd, err := os.Open("test.go")
    if err != nil {
        log.Fatal(err)
    }
    // TODO: use fd.
    }
这时候就可以使用空格标识符来引用已导入包中的符号，同样，将fd赋值予空格标识符就可以避免报错，下面这个程序就可以编译：
    package main
    import (
        "fmt"
        "io"
        "log"
        "os"
    )
    var _ = fmt.Printf // For debugging; delete when done.
    var _ io.Reader    // For debugging; delete when done.
    func main() {
        fd, err := os.Open("test.go")
        if err != nil {
            log.Fatal(err)
        }
        // TODO: use fd.
        _ = fd
    }

==Import for side effect（为副作用导入）==
有时导入某个包只是为了其副作用，而没有任何明确的使用.例如，在net/http/pprof包的init函数中记录了HTTP处理程序的调试信息.它有个可导出的API，但大部分客户端只需要该处理程序的记录和通过Web叶访问数据.只为了其副作用才导入该包，只需将包重命名为空白标识符：
    import _ "net/http/pprof"
这种导入格式能明确表示该包是为其副作用而导入的，因为没有其它使用该包的可能： 在此文件中，它没有名字，若它有名字而我们没有使用，编译器就会拒绝该程序.
==Interface checks（接口检查）==
大部分的接口都是静态的，因此只有在编译的时候才会检查，比如，将一个*os.File传入一个预期的io.Reader函数将不会被编译，除非*os.File实现了io.Reader接口.

但是有的接口检查会发生在运行的时候.比如：在定义了Marshaler接口的encoding/json包中，当JSON编码器接收到了一个实现了该接口的值，那么该编码器就会调用该值的编组方法，将其转换为JSON，而非进行标准的类型转换.编码器会在运行的时候用类型断言来检查它的属性，就像这样：
    m, ok := val.(json.Marshaler)
如果只需要判断某个类型是否实现了某个接口，而实际上并没有使用接口本身，可能是作为错误检查的一部分，就可以使用空白标识符来忽略类型断言的值：
    if _, ok := val.(json.Marshaler); ok {
        fmt.Printf("value %v of type %T implements json.Marshaler\n", val, val)
    }
当需要确保某个包中实现的类型一定满足该接口时，就会遇到这种情况.若某个类型，例如json.RawMessage，需要一种定制的JSON表现时，它应当实现json.Marshaler，但是这里并没有静态转换促使编译器去自动验证它，若该类型通过忽略转换失败来满足该接口，那么JSON编码器仍可工作，但它却不会使用定制的实现.为确保其实现是正确的，可在该包中用空白标识符声明一个全局变量：
    var _ json.Marshaler = (*RawMessage)(nil)
在此声明中，我们调用了一个*RawMessage转换并将其赋予了Marshaler，以此来要求*RawMessage实现Marshaler，而该属性将会在编译时被检测，若json.Marshaler接口被更改，此包将无法通过编译，而我们则会注意到它需要更新.

在这种结构中出现空白标识符，表明该声明的存在只是为了类型检查，而不是创建一个变量.但是不要为了满足接口就将它用于任何类型，只有当代码中不存在静态类型转换时才能使用这种声明.
----
=Embedding（内嵌）=
Go并不提供典型的，类型驱动的子类化概念，但通过将类型内嵌到结构体或接口中， 它就能“借鉴”部分实现.

接口内嵌非常简单，下面是io.Reader和io.Write接口的定义：
    type Reader interface {
        Read(p []byte) (n int, err error)
    }
    type Writer interface {
        Write(p []byte) (n int, err error)
    }
io包也导出了一些其它接口，以此来阐明对象所需实现的方法，例如io.ReadWriter就是个包含Read和Write的接口，我们可以通过显示地列出这两个方法来指明io.ReadWriter，但通过将这两个接口内嵌到新的接口中显然更容易且更具启发性，就像这样：
    // ReadWriter 接口结合了 Reader 和 Writer 接口.
    type ReadWriter interface {
        Reader
        Writer
    }
正如它看起来那样：ReadWriter能够做任何Reader和Writer可以做到的事情，它是内嵌接口的联合体（它们必须是不相交的方法集），只有接口能被嵌入到接口中.

同样的基本想法可以应用在结构体中，但其意义更加深远.bufio包中有bufio.Reader和bufio.Writer这两个结构体类型，它们每一个都实现了与io包中相同意义的接口.此外，bufio还通过结合reader/writer并将其内嵌到结构体中，实现了带缓冲的reader/writer：它列出了结构体中的类型，但并未给予它们字段名.
    // ReadWriter 存储了指向 Reader 和 Writer 的指针.
    // 它实现了 io.ReadWriter.
    type ReadWriter struct {
        *Reader  // *bufio.Reader
        *Writer  // *bufio.Writer
    }
内嵌的元素为指向结构体的指针，当然它们在使用前必须被初始化为指向有效结构体的指针，ReadWriter结构体和通过如下方式定义：
    type ReadWriter struct {
        reader *Reader
        writer *Writer
    }
但为了提升该字段的方法并满足io接口，我们同样需要提供转发的方法，就像这样：
    func (rw *ReadWriter) Read(p []byte) (n int, err error) {
        return rw.reader.Read(p)
    }
而通过直接内嵌结构体，我们就能避免如此繁琐.内嵌类型的方法可以直接引用，这意味着bufio.ReadWriter不仅包括bufio.Reader和bufio.Writer的方法，它还同时满足下列三个接口：io.Reader、io.Write以及io.ReadWriter.

还有种区分内嵌与子类的重要手段.当内嵌一个类型时，该类型的方法会成为外部类型的方法，但当它们被调用时，该方法的接收者是内部类型，而非外部的.在我们的例子中，当bufio.ReadWriter的Read方法被调用时，它与之前写的转发方法具有同样的效果；接收者是ReadWriter的reader字段，而非ReadWriter本身.

内嵌同样可以提供便利.这个例子展示了一个内嵌字段和一个常规的命名字段.
    type Job struct {
        Command string
        *log.Logger
    }
Job类型现在有了Log、Logf和*log.Logge的其它方法.我们当然可以为Logger提供一个字段名，但完全不必这么做.现在，一旦初始化后，我们就能记录Job了：
    job.Log("starting now...")
Logger是Job结构体的常规字段，因此我们可在Job的构造函数中，通过一般的方式来初始化它，就像这样：
    func NewJob(command string, logger *log.Logger) *Job {
        return &Job{command, logger}
    }
或通过复合字面：
    job := &Job{command, log.New(os.Stderr, "Job: ", log.Ldate)}
若我们需要直接引用内嵌字段，可以忽略包限定名，直接将该字段的类型名作为字段名， 就像我们在ReaderWriter结构体的Read方法中做的那样.若我们需要访问Job类型的变量job的*log.Logger，可以直接写作job.Logger.若我们想精炼Logger的方法时，这会非常有用.
    func (job *Job) Logf(format string, args ...interface{}) {
        job.Logger.Logf("%q: %s", job.Command, fmt.Sprintf(format, args...))
    }
内嵌类型会引入命名冲突的问题，但解决规则却很简单.首先，字段或方法X会隐藏该类型中更深层嵌套的其它项X.若log.Logger包含一个名为Command的字段或方法，Job的Command字段会覆盖它.

其次，若相同的嵌套层级上出现同名冲突，通常会产生一个错误.若Job结构体中包含名为Logger的字段或方法，再将log.Logger内嵌到其中的话就会产生错误.然而，若重名永远不会在该类型定义之外的程序中使用，那就不会出错.这种限定能够在外部嵌套类型发生修改时提供某种保护.因此，就算添加的字段与另一个子类型中的字段相冲突，只要这两个相同的字段永远不会被使用就没问题.


