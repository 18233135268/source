==Express==
===目录结构===
====bin====
====node_moudules====
*项目所需要的各种依赖包
====public====
*一些资源文件
====routes====
*路径控制
====views====
*视图
====app.js====
*项目主要配置内容
====package.json====
*包依赖清单
===module===
====require====
*通过require函数获取module,例如：
<code>var express = require('express');</code>
====module.exports====
*用于暴露给另外一些module使用,例如：
<source lang=express>
//hello.js

function Hello(){
  var name;
  
  this.setName = function(oname){
    name = oname;
  };
  
  this.sayHello = function(){
    console.log('Hello ' + name);
  };
};

module.exports = Hello;
</source>
然后就可以直接获得这个对象了：
<source>
//another.js

var Hello = require('./hello');

hello = new Hello();
hello.setName('Jsharkc');
hello.sayHello();
</source>
====createApplication in Express====
<source lang=express>
function createApplication() {
  var app = function(req, res, next) {
    app.handle(req, res, next);
  };

  mixin(app, EventEmitter.prototype, false);
  mixin(app, proto, false);

  app.request = { __proto__: req, app: app };
  app.response = { __proto__: res, app: app };
  app.init();
  return app;
}
</source>
*在Express module 中，核心部分就是createApplication函数，app.handle(req,res,next)用于处理浏览器发送过来的请求。
*mixin函数把第二个参数的对象属性传给第一个参数对象，第三个参数若为true,则所有参数，否则，添加第一个参数对象没有的属性。
*app.request对象原型为request module,app.response对象原型为response module。
*app.init()为初始化配置信息。详情请看application.js
====application.js====
=====app.init=====
<source lang=javascript>
  app.init = function init() {
  this.cache = {};
  this.engines = {};
  this.settings = {};

  this.defaultConfiguration();
};
</source>
*设定了cache对象(render的时候用到)，配置信息settings对象，engines对象(模板引擎)，最后进行默认的配置。
=====app.defaultConfiguration=====
<source>
  // default settings
  this.enable('x-powered-by');   //设置可以用‘x-powered-by’显示使用用的语言或框架
  this.set('etag', 'weak');      //设置etag为弱匹配的，只能模糊匹配
  this.set('env', process.env.NODE_ENV || 'development');  //设置运行环境，是‘开发’还是‘运营’
  this.set('query parser', 'extended');  //暂时还不知道  〒▽〒
  this.set('subdomain offset', 2);    //暂时还不知道  〒▽〒
  this.set('trust proxy', false);   //设置是否激活反向代理， 默认为 false
</source>
*解释一下Etag:Etag是由服务器产生的，用于判断两次请求是否相同，若相同直接返回304和一个空响应体，客户端使用本地缓存，否则正常执行。
=====app.set(setting,val)=====
<source>
app.set = function set(setting, val) {  
  if (arguments.length === 1) {
    // app.get(setting)
    return this.settings[setting];
  }
  debug('set "%s" to %o', setting, val);
  // set value
  this.settings[setting] = val;
  // trigger matched settings
  switch (setting) {
    case 'etag':
      this.set('etag fn', compileETag(val));
      break;
    case 'query parser':
      this.set('query parser fn', compileQueryParser(val));
      break;
    case 'trust proxy':
      this.set('trust proxy fn', compileTrust(val));
      // trust proxy inherit back-compat
      Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
        configurable: true,
        value: false
      });
      break;
  }
  return this;
};
</source>
*根据arguments的数量来读取或者进行设置。当setting为'etag'，'query parser'，'trust proxy'其中一个时，会进行额外的设置
*如果传入参数个数为一，则直接返回<code>this.settings[setting];</code>
*如果传入参数个数为二，则进行赋值操作<code>this.settings[setting] = val;</code>

#若setting为'etag',则递归调用app.set（'etag fn',val）
##若val为一个方法，则val不变.
##若val为true,则val变为utils.wetag(body,encoding)函数。
##若val为false,则val为空。
##若val为'strong',则val变为utils.etag(body,encoding)函数。
##若val为'weak',则val变为utils.wetag(body,encoding)函数。
##若val为别的，则抛出TypeError异常。
#若setting为'query parser'，则递归调用app.set('query parser fn',val)
##若val为一个方法，则val不变.
##若val为true,则val变为querystring.parse函数。
##若val为false,则val为空对象{}。
##若val为'extended',则val变为parseExtendedQueryString函数。
##若val为'simple',则val变为querystring.parse函数。
##若val为别的，则抛出TypeError异常。
#若setting为'trust proxy'，则递归调用app.set('trust proxy fn',val)
##若val为一个方法，则val不变.
##若val为true,则val变为function(){return true}函数。
##若val为false,则val为proxyaddr.compile([])。
##若val为'''number类型''',则val变为function(a,i){return val}函数。
##若val为'''string类型''',则val变为proxyaddr.compile(val.split(/*,*/))。
##若val为别的，则val为proxyaddr.compile([])。
----
=====app.METHODS=====
<source>
methods.forEach(function(method){
  app[method] = function(path){
    if ('get' == method && 1 == arguments.length) return this.set(path);

    this.lazyrouter();

    var route = this._router.route(path);
    route[method].apply(route, [].slice.call(arguments, 1));
    return this;
  };
});
</source>
*methods在顶部模块引入中定义，其实是一个包含各个HTTP请求方法的数组
*该代码中实际上是遍历了所有methods中定义的方法，当然其中包括get，而且get方法是被'重载'的，即当app.get();的参数只有一个时候，执行的是获取变量的功能，否则，执行route组件中的route.get方法，将该路由和回调函数(即第二个参数)存储进一个栈中
======this.lazyrouter()======
<source>
app.lazyrouter = function() {
  if (!this._router) {
    this._router = new Router({
      caseSensitive: this.enabled('case sensitive routing'),
      strict: this.enabled('strict routing')
    });

    this._router.use(query());
    this._router.use(middleware.init(this));
  }
};
</source>
它的作用是在第一次定义路由的时候初始化路由(添加基本的路由)，并添加两个基本的中间件.
=====app.route=====
<source>
app.route = function(path){
  this.lazyrouter();
  return this._router.route(path);
};
</source>
首先调用this.lazyrouter(),添加两个中间件query,express.init,然后调用router组件的route函数，生成一个路由中间件放入中间件栈中
<source>
proto.route = function(path){
  var route = new Route(path);

  var layer = new Layer(path, {
    sensitive: this.caseSensitive,
    strict: this.strict,
    end: true
  }, route.dispatch.bind(route));

  layer.route = route;

  this.stack.push(layer);
  return route;
};
</source>
是用一个layer封装一个route中间件放入栈中,将遵循express的触发流程.
=====methods=====
<source>
methods.forEach(function(method){
  app[method] = function(path){
    if (method === 'get' && arguments.length === 1) {
      // app.get(setting)
      return this.set(path);
    }

    this.lazyrouter();

    var route = this._router.route(path);
    route[method].apply(route, slice.call(arguments, 1));
    return this;
  };
});
</source>
浏览method的每一种方法，并且将其定义eg:
*'get',
*'post',
*'put',
*'head',
*'delete',
*'options'
=====app.enable=====
<source>
app.enable = function enable(setting) {
  return this.set(setting, true);
};
</source>
将this.指向的对象的值设置为true
=====app.disable=====
<source>
app.disable = function disable(setting) {
  return this.set(setting, false);
};
</source>
将this指向的值设置为false

路由参数的处理逻辑
=====engine=====
<source>
app.engine = function engine(ext, fn) {
  if (typeof fn !== 'function') {
    throw new Error('callback function required');
  }

  // get file extension
  var extension = ext[0] !== '.'
    ? '.' + ext
    : ext;

  // store engine
  this.engines[extension] = fn;

  return this;
};
</source>
通过fn 函数来处理ext扩展名文件
====中间价的使用====
=====app.use=====
<source>
app.use = function use(fn) {
  var offset = 0;
  var path = '/';//默认路径为‘/’
  if (typeof fn !== 'function') {//实参类型不是函数
    var arg = fn;//定义arg并用fn赋值

    while (Array.isArray(arg) && arg.length !== 0) {//如果arg是一个数组并且长度大于0：可能该数组里含有多个函数或则包含路径
      arg = arg[0];
    }
    if (typeof arg !== 'function') {//如果该数组的第一个元素不为函数，说明该元素为路径
      offset = 1;
      path = fn;//覆盖默认路径'/'
    }
  }

  var fns = flatten(slice.call(arguments, offset));//如果有路径将路径切除，fns为实参中的处理函数

  if (fns.length === 0) {//如果fns的长度为0，则丢出错误异常
    throw new TypeError('app.use() requires middleware functions');
  }

  // setup router
  this.lazyrouter();//如果整个工程中这是第一次定义路由那么初始化路由(添加基本的路由)，每都次调用该函数 添加两个基本的中间件
  var router = this._router;

  fns.forEach(function (fn) {//遍历fns数组中的所有元素
    // non-express app
    if (!fn || !fn.handle || !fn.set) {//如果fn中自身，handle，set有一个不存在，说明该fn为一个子APP
      return  router.use(path, fn);;//返回  router.use(path, fn);
}

    debug('.use app under %s', path);
    fn.mountpath = path;
    fn.parent = this;
 router.use(path, function mounted_app(req, res, next) {//当fn为一个子APP的时候使用该函数
      var orig = req.app;
      fn.handle(req, res, function (err) {
        req.__proto__ = orig.request;//把当前的app的req和res与项目APP的req和res进行同步化
        res.__proto__ = orig.response;
        next(err);
      });
    });

    // mounted an app
    fn.emit('mount', this);
  }, this);
    return this;

};
</source>
APP.use将路径和函数分开，并将其传入router.use中进行处理
======router.use======
<source>
router.__proto__ = proto   
</source>
说明router只继承proto
<source>
proto.use = function use(fn) {
  var offset = 0;
  var path = '/';

  // default path to '/'
  // disambiguate router.use([fn])
  if (typeof fn !== 'function') {
    var arg = fn;

    while (Array.isArray(arg) && arg.length !== 0) {
      arg = arg[0];
    }

    // first arg is the path
    if (typeof arg !== 'function') {
      offset = 1;
      path = fn;
    }
  }

  var callbacks = flatten(slice.call(arguments, offset));

  if (callbacks.length === 0) {
    throw new TypeError('Router.use() requires middleware functions');
  }

  for (var i = 0; i < callbacks.length; i++) {
    var fn = callbacks[i];

    if (typeof fn !== 'function') {
      throw new TypeError('Router.use() requires middleware function but got a ' + gettype(fn));
    }

    // add the middleware
    debug('use %s %s', path, fn.name || '<anonymous>');

    var layer = new Layer(path, {
      sensitive: this.caseSensitive,
        strict: false,
        end: false
    }, fn);

    layer.route = undefined;

    this.stack.push(layer);
  }

  return this;
};
</source>
可以看到proto.use和app.use的代码前部分有很大的相似之处重点分析不同之处
<source>

 var layer = new Layer(path, {//定义了一个layer
      sensitive: this.caseSensitive,
        strict: false,
        end: false
    }, fn);

    layer.route = undefined;

    this.stack.push(layer);//将路径和方法存放在栈的一个layer中
  }

  return this;
};
</source>
需要了解layer的实现

======layer======
<source>

function Layer(path, options, fn) {
  if (!(this instanceof Layer)) {
    return new Layer(path, options, fn);
  }//如果现在不存在一个layer则生成一个layer

  debug('new %s', path);
  var opts = options || {};

  this.handle = fn;//将函数方法存在this.handle中
  this.name = fn.name || '<anonymous>';
  this.params = undefined;
  this.path = undefined;//当前对象的默认路径为undefined
  this.regexp = pathRegexp(path,    this.keys = [], opts);//通过正则对路径进行解析和处理并对当前对象路径进行修改

  if (path === '/' && opts.end === false) {
    this.regexp.fast_slash = true;//满足if条件则将该路径存入fast_slash
  }
}

</source>
整个程序实现了将方法和路径封装到栈中的层
*所以整个中间件的封装已经实现,使用时通过栈层层向下同时对路径的匹配当路径相同时则可以进入该层，调用该层函数进行相应的处理。如路径不匹配的话则跳过该层进行下一层的匹配，若在其中遇到错误则跳到最后的错误处理器。当所有层都没有对应的路径匹配时，这时会响应404错误
*从proto处继承的属性（方法）
*继承的EventEmitter的原型
*route属性，表示中间件的默认请求路径
*stack数组，所有的中间件的存放处，中间件会被格式化成形为{route: route , handle : fn}的匿名对象存放
====app.handle====
<source>

app.handle = function handle(req, res, callback) {
  var router = this._router
    var done = callback || finalhandler(req, res, {
    env: this.get('env'),
    onerror: logerror.bind(this)
  });

  // no routes
  if (!router) {
    debug('no routes defined on app');
    done();
    return;
  }

  router.handle(req, res, done);
};

</source>
将每对[req,res]进行逐级分发，作用在每个定义好的路由及中间件上，直到最后完成.
======proto.handle======
<source>

proto.handle = function handle(req, res, out) {
  var self = this;

  debug('dispatching %s %s', req.method, req.url)
  var search = 1 + req.url.indexOf('?');//req中“？”字符的位置索引，用来判断是否有query string
  var pathlength = search ? search - 1 : req.url.length; //获取url的长度（除去query string）
  var fqdn = req.url[0] !== '/' && 1 + req.url.substr(0, pathlength).indexOf('://'); 
//若url以“/”开头，则为false,否则为"://"字符串的位置索引
  var protohost = fqdn ? req.url.substr(0, req.in.urldexOf('/', 2 + fqdn)): '';
 //若url不以“/”开头，则protohost为 协议:/(如https:/) 
var idx = 0;
  var removed = '';
  var slashAdded = false;
  var paramcalled = {};

  // store options for OPTIONS request
  // only used if OPTIONS request
  var options = [];//定义了一个空数组
  // middleware and routes
  var stack = self.stack;

  // manage inter-router variables
  var parentParams = req.params;
  var parentUrl = req.baseUrl || '';
  var done = restore(out, req, 'baseUrl', 'next', 'params');

  // setup next layer
  req.next = next;//

  // for options requests, respond with a default if nothing else responds
  if (req.method === 'OPTIONS') {
    done = wrap(done, function(old, err) {
      if (err || options.length === 0) return old(err);
      sendOptionsResponse(res, options, old);
    });
  }

  // setup basic req values
  req.baseUrl = parentUrl;
  req.originalUrl = req.originalUrl || req.url;

  next();

  function next(err) {//定义 next
    var layerError = err === 'route'
      ? null
      : err;

    // remove added slash
    if (slashAdded) {//若salshAdded标记为真，则去除最前面的“/”
      req.url = req.url.substr(1);
      slashAdded = false;
    }

    // restore altered req.url
    if (removed.length !== 0)  {
      req.baseUrl = parentUrl;
      req.url = protohost + removed + req.url.substr(protohost.length);
      removed = '';
    }

    // no more matching layers
    if (idx >= stack.length) {
      setImmediate(done, layerError);
      return;
    }
    var path = getPathname(req);  // get pathname of request

    if (path == null) {
      return done(layerError);
    }

    // find next matching layer
    var layer;
    var match;
    var route;

    while (match !== true && idx < stack.length) {
      layer = stack[idx++];
      match = matchLayer(layer, path);//将layer中的路径和require中的路径进行匹配
      route = layer.route;

      if (typeof match !== 'boolean') {
        // hold on to layerError
        layerError = layerError || match;
      }

      if (match !== true) {//如果匹配不为真则跳出该循环进行下一次匹配
        continue;
      }

      if (!route) {//如果route不存在也跳出本次循环进行下一次匹配
        // process non-route handlers normally
        continue;
      }

      if (layerError) {//如果存在layerError，则也跳出本次循环
        // routes do not match with a pending error
        match = false;
        continue;
      }

      var method = req.method;
      var has_method = route._handles_method(method);

      // build up automatic options response
      if (!has_method && method === 'OPTIONS') {如果if中的条件不存在则将'options'加入method中
        appendMethods(options, route._options());
      }

      // don't even bother matching route
      if (!has_method && method !== 'HEAD') {
        match = false;
        continue;
      }
    }

    // no match
    if (match !== true) {
      return done(layerError);
    }

    // store route for dispatch on change
    if (route) {
      req.route = route;
    }

    // Capture one-time layer values
    req.params = self.mergeParams
      ? mergeParams(layer.params, parentParams)
      : layer.params;
    var layerPath = layer.path;

    // this should be done for the layer
    self.process_params(layer, paramcalled, req, res, function (err) {//匹配parameter中的路径，匹配成功则调用其中的方法
      if (err) {
        return next(layerError || err);
      }

      if (route) {
        return layer.handle_request(req, res, next);
      }

      trim_prefix(layer, layerError, layerPath, path);
    });
  }

  function trim_prefix(layer, layerError, layerPath, path) {
    var c = path[layerPath.length];
    if (c && '/' !== c && '.' !== c) return next(layerError);

     // Trim off the part of the url that matches the route
     // middleware (.use stuff) needs to have the path stripped
    if (layerPath.length !== 0) {
      debug('trim prefix (%s) from url %s', layerPath, req.url);
      removed = layerPath;
      req.url = protohost + req.url.substr(protohost.length + removed.length);

      // Ensure leading slash
      if (!fqdn && req.url[0] !== '/') {
        req.url = '/' + req.url;
        slashAdded = true;
      }

      // Setup base URL (no trailing slash)
      req.baseUrl = parentUrl + (removed[removed.length - 1] === '/'
        ? removed.substring(0, removed.length - 1)
        : removed);
    }

    debug('%s %s : %s', layer.name, layerPath, req.originalUrl);

    if (layerError) {
      layer.handle_error(layerError, req, res, next);
    } else {
      layer.handle_request(req, res, next);
    }
  }
};

</source>

handle方法的角色只是一个对请求路径和中间件注册路径的一个匹配者，找出所有相匹配的中间件，并负责把它们一个个有序(因为中间件也是有序的push进的stack，handle又是靠索引来取的stack里的匿名对象)。
=====app.param=====
<source>
app.param= function param(name, fn) {
  this.lazyrouter();//通过该函数添加两个基本的中间件
   if (Array.isArray(name)) {//当name是一个数组，把该数组的元素依次进行param处理
    for (var i = 0; i < name.length; i++) {
      this.param(name[i], fn);//
    }

    return this;
  }

  this._router.param(name, fn);调用_router.param

  return this;
};
</source>
可以看到param中主要依赖_router.param
======proto.param======
<source>

proto.param = function param(name, fn) {
  // param logic
  if (typeof name === 'function') {//如果name是一个函数，那么把name添加到param中去
    deprecate('router.param(fn): Refactor to use path params');
    this._params.push(name);
    return;
  }

  // apply param functions
  var params = this._params;
  var len = params.length;
  var ret;

  if (name[0] === ':') {
    deprecate('router.param(' + JSON.stringify(name) + ', fn): Use router.param(' + JSON.stringify(name.substr(1)) + ', fn) instead');
    name = name.substr(1);//截取name中的id地址赋值给name
  }

  for (var i = 0; i < len; ++i) {
    if (ret = params[i](name, fn)) {
      fn = ret;
    }
  }

  // ensure we end up with a
  // middleware function
  if ('function' != typeof fn) {
    throw new Error('invalid param() call for ' + name + ', got ' + fn);
  }

  (this.params[name] = this.params[name] || []).push(fn);//把fn方法储存在param.[name]中
  return this;
};
</source>
说明在param（）函数中
*当参数只有一个的时候，该参数为方法，并且将其存在param中
*当参数为两个的时候，第一个为路径，第二个为方法，将路径存储在param.[name]的name中，而把方法存在param.[name]这个整体中
该函数的作用在：当我们在进行handle()函数处理的时候在对layer中路径匹配时也会对param中的name所存储的路径进行匹配，当匹配成功后，调用param的方法，当然param中没有路径的时候，默认为全部匹配
====整个项目的入口====
<source>
 var app = require('../app');//导入app
 var debug = require('debug')('untitled2:server');
 var http = require('http');

 /**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');//定义一个端口
app.set('port', port);//将端口值赋给port

var server = http.createServer(app);//创建一个http服务器，将app和服务器连接

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);//在端口上进行监听
server.on('error', onError);
server.on('listening', onListening);


function normalizePort(val) {将port转化成number，字符串，或则false
  var port = parseInt(val, 10);//转化为number形

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {//发生错误时丢出异常
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {//匹配错误代码
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
</source>
总而言之呢这就是一个工程的入口，并且将app和sever联系起来，是的express框架可以正常的运行。并且实行了对一个程序的监听