== 类和结构体的定义 ==
# 类是引用类型
# 结构体是值类型
# 类和结构体的区别
## 类可以继承另一个类的属性和方法
## 类型转换允许在运行时检查和解释一个类实例的类型
## 取消类的初始化释放其所分配的资源
## 引用计数允许对一个类的多次引用
# 结构体总是通过被复制的方式在代码中传递，因此请不要使用引用计数
<source lang="swift">
struct Resolution {// 结构体的定义
    var width = 0
    var height = 0
}
class VideoMode {// 类的定义
    var resolution = Resolution()
    var interlaced = false
    var frameRate = 0.0
    var name: String?
}
</source>
----
== 类和结构体实例化 ==
<source lang="swift">
let someResolution = Resolution()
let someVideoMode = VideoMode()
</source>
----
== 判断引用 ==
<source lang="swift">
if tenEighty === alsoTenEighty { // 判断引用是否相等 判断不等用!==
    print("tenEighty and alsoTenEighty refer to the same VideoMode instance.")
}
</source>
----
== 属性 ==
=== 存储属性 ===
<source lang="swift">
struct FixedLengthRange {
    var firstValue: Int
    let length: Int
}
var rangeOfThreeItems = FixedLengthRange(firstValue: 0, length: 3)
rangeOfThreeItems.firstValue = 6

// 结构体（struct）属于值类型,当值类型的实例被声明为常量的时候，它的所有属性也就成了常量。
let rangeOfFourItems = FixedLengthRange(firstValue: 0, length: 4)
rangeOfFourItems.firstValue = 6 //所以此时这样修改会报错
</source>
----
==== Lazy Stored Properties ====
# 延迟存储属性是指当第一次被调用的时候才会计算其初始值的属性。
# 必须将延迟存储属性声明成变量。
<source lang="swift">
class DataImporter { // 类的初始化时耗时
    var fileName = "data.txt"
    //...
    
} 
class DataManager {
    lazy var importer = DataImporter()
    var data = [String]()
}
 
let manager = DataManager()
manager.data.append("Some data")
manager.data.append("Some more data")
//由于使用了@lazy，importer属性只有在第一次被访问的时候才被创建。
print(manager.importer.fileName)
</source>
----
=== 计算属性 ===
# 必须用var来定义计算属性，因为它的值是不固定的
<source lang="swift">
struct Point {
    var x = 0.0, y = 0.0
}
struct Size {
    var width = 0.0, height = 0.0
}
struct Rect {
    var origin = Point()
    var size = Size()
    var center: Point {
        get { // getter方法来获取值
            let centerX = origin.x + (size.width / 2)
            let centerY = origin.y + (size.height / 2)
            return Point(x: centerX, y: centerY)
        }
        set(newCenter) { // setter方法间接的设置属性和变量的值
            origin.x = newCenter.x - (size.width / 2)
            origin.y = newCenter.y - (size.height / 2)
        }
    }
}
var square = Rect(origin: Point(x: 0.0, y: 0.0),
                  size: Size(width: 10.0, height: 10.0))
let initialSquareCenter = square.center
square.center = Point(x: 15.0, y: 15.0)
print("square.origin is now at (\(square.origin.x), \(square.origin.y))")
</source>
----
==== 便捷 setter 声明 ====
<source lang="swift">
struct AlternativeRect {
    var origin = Point()
    var size = Size()
    var center: Point {
        get {
            let centerX = origin.x + (size.width / 2)
            let centerY = origin.y + (size.height / 2)
            return Point(x: centerX, y: centerY)
        }
        set {
            origin.x = newValue.x - (size.width / 2) // 计算属性的 setter 没有定义表示新值的参数名, 使用默认名称newValue
            origin.y = newValue.y - (size.height / 2)
        }
    }
}
</source>
----
==== 只读计算属性 ====
# 只读计算属性，只有 getter 没有 setter，get 关键字可省略
<source lang="swift">
struct Cuboid {
    var width = 0.0, height = 0.0, depth = 0.0
    var volume: Double {
        return width * height * depth
    }
}
</source>
----
=== 属性监视器 ===
# willSet 和 didSet 监视器在属性初始化过程中不会被调用，他们只会当属性的值在初始化之外的地方被设置时被调用。
# 可以为除了延迟存储属性之外的其他存储属性添加属性监视器，也可以通过重载属性的方式为继承的属性（包括存储属性和计算属性）添加属性监视器。
# 属性监视器所描述的模式也可以用于全局变量和局部变量
<source lang="swift">
class StepCounter {
    var totalSteps: Int = 0 {
        willSet(newTotalSteps) { // 设置新的值之前调用,这里的参数也是可以指定名，没有的话默认为 newvalue
            print("About to set totalSteps to \(newTotalSteps)")
        }
        didSet { // 新的值被设置之后立即调用,可以为该参数命名或者使用默认参数名 oldValue
            if totalSteps > oldValue  {
                print("Added \(totalSteps - oldValue) steps")
            }
        }
    }
}
let stepCounter = StepCounter()
stepCounter.totalSteps = 200
// About to set totalSteps to 200
// Added 200 steps
stepCounter.totalSteps = 360
// About to set totalSteps to 360
// Added 160 steps
stepCounter.totalSteps = 896
// About to set totalSteps to 896
// Added 536 steps

//属性监视器在全局变量中的使用
var total  = 10 {
    willSet(newTotalSteps) {
        print("About to set totalSteps to \(newTotalSteps)")
    }
    didSet {
        if total > oldValue  {
            print("Added \(total + oldValue) steps")
        }
    }
}
//在类里面调用
total = 20
// About to set totalSteps to 20
// Added 30 steps
</source>
----
=== 全局变量和局部变量 ===
# 全局变量是在函数、方法、闭包或任何类型之外定义的变量，局部变量是在函数、方法或闭包内部定义的变量。
# 全局的常量或变量都是延迟计算的，跟延迟存储属性相似，不同的地方在于，全局的常量或变量不需要标记@lazy特性；局部范围的常量或变量不会延迟计算。
----
=== 类型属性语法 ===
<source lang="swift">
struct SomeStructure {
    static var storedTypeProperty = "Some value."
    static var computedTypeProperty: Int {
        return 1
    }
}
enum SomeEnumeration { //关键字static来定义值类型的类型属性
    static var storedTypeProperty = "Some value."
    static var computedTypeProperty: Int {
        return 6
    }
}
class SomeClass {
    static var storedTypeProperty = "Some value."
    static var computedTypeProperty: Int {
        return 27
    }
    class var overrideableComputedTypeProperty: Int { // 关键字class来为类（class）定义类型属性
        return 107
    }
}
----
=== 获取和设置类型属性的值 ===
print(SomeStructure.storedTypeProperty)
// Prints "Some value."
SomeStructure.storedTypeProperty = "Another value."
print(SomeStructure.storedTypeProperty)
// Prints "Another value."
print(SomeEnumeration.computedTypeProperty)
// Prints "6"
print(SomeClass.computedTypeProperty)
// Prints "27"
</source>
----
== 方法 ==
# 结构体和枚举能够定义方法是 Swift 与 C/Objective-C 的主要区别之一
# Swift 默认仅给方法的第一个参数名称一个局部参数名称;默认同时给第二个和后续的参数名称局部参数名称和外部参数名称。
<source lang="swift">
class Counter { 
  var count: Int = 0 
  func incrementBy(amount: Int, numberOfTimes: Int) { //默认情况下，Swift 只把amount当作一个局部名称，但是把numberOfTimes即看作局部名称又看作外部名称。这里和函数的使用方法一样，同样也有（_）的概念，并且使用方法一样。
    count += amount * numberOfTimes 
  } 
} 
let counter = Counter() 
counter.incrementBy(5, numberOfTimes: 3) 
</source>
----
=== self属性 ===
# self消除方法参数x和实例属性x之间的歧义
<source lang="swift"> 
struct Point { 
  var x = 0.0, y = 0.0 
  func isToTheRightOfX(x: Double) -> Bool { // self.x指的是当前类的变量x, 后边的x是指参数x
    return self.x > x 
  } 
} 
let somePoint = Point(x: 4.0, y: 5.0) 
if somePoint.isToTheRightOfX(1.0) { 
  println("This point is to the right of the line where x == 1.0") 
} 
</source>
----
=== 在实例方法中修改值类型 ===
# 一般情况下，值类型的属性不能在它的实例方法中被修改,将关键字 mutating 放到方法的 func 关键字之前就可以了
<source lang="swift">
struct Point {
    var x = 0.0, y = 0.0
    mutating func moveByX(deltaX: Double, y deltaY: Double) {// 变异方法
        x += deltaX
        y += deltaY
    }
}
var somePoint = Point(x: 1.0, y: 1.0)
somePoint.moveByX(2.0, y: 3.0)
print("The point is now at (\(somePoint.x), \(somePoint.y))")
// Prints "The point is now at (3.0, 4.0)"

//不能在结构体类型常量上调用变异方法，因为常量的属性不能被改变
let fixedPoint = Point(x: 3.0, y: 3.0)
fixedPoint.moveByX(2.0, y: 3.0)
// this will report an error
</source>
----
=== 在可变方法中给self赋值 ===
<source lang="swift"> struct Point {
    var x = 0.0, y = 0.0
    mutating func moveByX(deltaX: Double, y deltaY: Double) {
        self = Point(x: x + deltaX, y: y + deltaY)
    }
}
// 枚举的变异方法可以把self设置为相同的枚举类型中不同的成员
enum TriStateSwitch {
    case Off, Low, High
    mutating func next() {
        switch self {
        case Off:
            self = Low
        case Low:
            self = High
        case High:
            self = Off
        }
    }
}
var ovenLight = TriStateSwitch.Low
ovenLight.next()
// ovenLight is now equal to .High
ovenLight.next()
// ovenLight is now equal to .Off
</source>
----
=== 类方法 ===
# 声明类的类型方法，在方法的func关键字之前加上关键字class
# 声明结构体和枚举的类型方法，在方法的func关键字之前加上关键字static
# 在 Objective-C 里面，你只能为 Objective-C 的类定义类型方法, 在 Swift 中，你可以为所有的类、结构体和枚举定义类型方法
<source lang="swift">
class SomeClass {
    class func someTypeMethod() {
        // type method implementation goes here
    }
}
SomeClass.someTypeMethod()

struct LevelTracker {
    static var highestUnlockedLevel = 1
    static func unlockLevel(level: Int) {
        if level > highestUnlockedLevel { highestUnlockedLevel = level }
    }
    static func levelIsUnlocked(level: Int) -> Bool {
        return level <= highestUnlockedLevel
    }
    var currentLevel = 1
    mutating func advanceToLevel(level: Int) -> Bool {
        if LevelTracker.levelIsUnlocked(level) {
            currentLevel = level
            return true
        } else {
            return false
        }
    }
}
</source>
----
== 继承 ==
=== 定义一个基类 ===
<source lang="swift">
class Vehicle { 
    var numberOfWheels: Int 
    var maxPassengers: Int 
    func description() -> String { 
        return "\(numberOfWheels) wheels; up to \(maxPassengers) passengers" 
    } 
    init() { // 构造器 设置属性的值
        numberOfWheels = 0 
        maxPassengers = 1 
    } 
} 
</source>
----
=== 子类 ===
<source lang="swift">
class Bicycle: Vehicle { // Bicycle 继承自 Vehicle
    var hasBasket = false
}
</source>
----
=== 重写 ===
# 如果要重写某个特性，你需要在重写定义的前面加上override关键字。
# 你可以通过使用super前缀来访问父类的方法
# 子类可以为继承来的实例方法（instance method），类方法（class method），实例属性（instance property），或附属脚本（subscript）提供自己定制的实现（implementation）。
==== 重写方法 ====
<source lang="swift">
class Train: Vehicle {
    override func makeNoise() {
        print("Choo Choo")
    }
}
</source>
----
==== 重写属性 ====
<source lang="swift">
class Car: Vehicle {
    var gear = 1
    override var description: String {
        return super.description + " in gear \(gear)"
    }
}
</source>
----
==== 重写属性观察器 ====
# 不可以为继承来的常量存储型属性或继承来的只读计算型属性添加属性观察器,因为这些属性的值不可以被设置
<source lang="swift">
class AutomaticCar: Car {
    override var currentSpeed: Double {
        didSet {
            gear = Int(currentSpeed / 10.0) + 1
        }
    }
}
</source>
----
=== 防止重写 ===
# 通过把方法，属性或附属脚本标记为final来防止它们被重写,在关键字前加上 @final。
# 如果你重写了final方法，属性或附属脚本，在编译时会报错。
----