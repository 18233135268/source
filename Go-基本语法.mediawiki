== Go 特殊语法 ==
=== 包 ===
包是结构化代码的一种方式：每个程序都由包（通常简称为 pkg）的概念组成，可以使用自身的包或者从其它包中导入内容

如同其它一些编程语言中的类库或命名空间的概念，每个 Go 文件都属于且仅属于一个包。一个包可以由许多以 .go 为扩展名的源文件组成，因此文件名和包名一般来说都是不相同的。

你必须在源文件中非注释的第一行指明这个文件属于哪个包，如：package main。package main表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包。

一个应用程序可以包含不同的包，而且即使你只使用 main 包也不必把所有的代码都写在一个巨大的文件里：你可以用一些较小的文件，并且在每个文件非注释的第一行都使用 package main 来指明这些文件都属于 main 包。如果你打算编译包名不是为 main 的源文件，如 pack1，编译后产生的对象文件将会是 pack1.a 而不是可执行程序。另外要注意的是，所有的包名都应该使用小写字母。

=== 可见性规则 ===

当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 private ）。

（大写字母可以使用任何 Unicode 编码的字符，比如希腊文，不仅仅是 ASCII 码中的大写字母）。

因此，在导入一个外部包后，能够且只能够访问该包中导出的对象。

假设在包 pack1 中我们有一个变量或函数叫做 Thing（以 T 开头，所以它能够被导出），那么在当前包中导入 pack1 包，Thing 就可以像面向对象语言那样使用点标记来调用：pack1.Thing（pack1 在这里是不可以省略的）。

因此包也可以作为命名空间使用，帮助避免命名冲突（名称冲突）：两个包中的同名变量的区别在于他们的包名，例如 pack1.Thing 和 pack2.Thing。

*如果你导入了一个包却没有使用它，则会在构建程序时引发错误，如 imported and not used: os，这正是遵循了 Go 的格言：“没有不必要的代码！“。



=== 关键字 ===
下面列举了 Go 代码中会使用到的 25 个关键字或保留字：
{|
|break||default||func||interface||select
|-
|case||defer||go||map||struct
|-
|chan||else||goto||package||switch
|-
|const||fallthrough||if||range||type
|-
|continue||for||import||return||var
|-

=== 预定义标识符 ===
除了以上介绍的这些关键字，Go 语言还有 36 个预定义标识符，其中包含了基本类型的名称和一些基本的内置函数
{|
|append||bool||byte||cap||close||complex||complex64||complex128||uint16
|-
|copy||false||float32||float64||imag||int||int8||int16||uint32
|-
|int32||int64||iota||len||make||new||nil||panic||uint64
|-
|print||println||real||recover||string||true||uint||uint8||uintptr
|-

=== 代码格式化 ===
gofmt 可以保证代码风格的统一，如下面的代码：
```go
type T struct {
    name string // name of the object
    value int // its value
}
```
执行 gofmt 后，变为：
```go
type T struct {
    name  string  // name of the object
    value int     // its value
}
```
----
=== 分号 ===
在下面的规则下，可以省略分号：<br>
# 当一行的结尾为如下内容时，自动插入分号 
## 变量
## 整数、浮点数、复数、字符串
## break continue fallthrough return
## ++ -- ) ] }
# 一行代码包含多条语句时，在 ) } 前的语句可省略分号
```go
go func() { for { dst <- <-src } }()

// 副作用 
if i < f() {
    g()
}

if i < f() // wrong
{          // wrong
    g()
}
```
----
=== 字符串 ===
* `` 内的字符不进行转义 <nowiki>[raw string literals]</nowiki>
* "" 内的字符进行正常转义 <nowiki>[interpreted string literals]</nowiki>
```go
`abc`                // same as "abc"
`\n
\n`                  // same as "\\n\n\\n"
"\n"
```
----
=== 变量 ===
var 语句定义了一个变量的列表；跟函数的参数列表一样，类型在后面。且都有默认值(C/C++ 变量是没有默认值的)。
就像在这个例子中看到的一样，`var` 语句可以定义在包或函数级别。
```go
var x interface{}  // x is nil and has static type interface{}
var v *T           // v has value nil, static type *T
var c, python, java bool     //they all have value false and dynamic type bool
var i, j int = 1, 2     //初始化变量
var c, python, java = true, false, "no!"  //如果初始化是使用表达式，则可以省略类型；变量从初始值中获得类型。

func main() {
	var i int     //x has value 0 and dynamic type int
	fmt.Println(i, c, python, java)
}
// 分组定义
var (
    ErrInternal      = errors.New("regexp: internal error")
    ErrUnmatchedLpar = errors.New("regexp: unmatched '('")
    ErrUnmatchedRpar = errors.New("regexp: unmatched ')'")
    ...
)

// 技巧：根据变量相关性统一定义
var (
    countLock   sync.Mutex
    inputCount  uint32
    outputCount uint32
    errorCount  uint32
)

//在函数中，`:=` 简洁赋值语句在明确类型的地方，可以用于替代 var 定义。
func main() {
	k := 3
	c, python, java := true, false, "no!"
	fmt.Println(k, c, python, java)
}
```
----

=== 基本类型 ===
Go 的基本类型有
```go
bool

string

int  int8  int16  int32  int64
uint uint8 uint16 uint32 uint64 uintptr

byte // uint8 的别名

rune // int32 的别名
     // 代表一个Unicode码

float32 float64

complex64 complex128
```
=== 常量 ===
常量的定义与变量类似，只不过使用 const 关键字。
常量可以是字符、字符串、布尔或数字类型的值。
常量不能使用 := 语法定义。
```go
const Pi = 3.14
```

=== 类型定义 ===
类似于 C/C++ 的 typedef
```go
type T1 string
type T2 T1
type T3 []T1
type T4 T3
```
----
=== 多返回值 ===
```go
f, err := os.Open(name) // 此处定义 err
if err != nil {
    return err
}
d, err := f.Stat()   // 这里并没有重新定义 err，只是赋值
if err != nil {
    f.Close()
    return err
}
codeUsing(f, d)
```
----
== 控制流 ==
=== if ===
```go
if x > 0 {
    return y
}

// 更加简洁的初始化，等价于 C: if ((err = chmod(fp)) != NULL)
//`if` 语句可以在条件之前执行一个简单的语句。
//由这个语句定义的变量的作用域仅在 if 范围之内。
if err := file.Chmod(0664); err != nil {
    log.Print(err)
    return err
}
```
----
=== for ===
go 没有 while, do-while
```go
// Like a C for
for init; condition; post { }

// Like a C while
for condition { }

// Like a C for(;;)
for { }

// 注意 for 中的分号
sum := 0
for i := 0; i < 10; i++ {
    sum += i
}

// 遍历 array, slice, string, map 或 从 channel 中读取内容时，可以使用如下形式
for key, value := range oldMap {
    newMap[key] = value
}

// 如果只需要第一个值 (key or index)
for key := range m {
    if key.expired() {
        delete(m, key)
    }
}

// 如果只需要第二个值 (value)
sum := 0
for _, value := range array {
    sum += value
}

// range 可以正确处理 UTF-8 字符
// character U+65E5 '日' starts at byte position 0
// character U+672C '本' starts at byte position 3
// character U+FFFD '�' starts at byte position 6
// character U+8A9E '語' starts at byte position 7
for pos, char := range "日本\x80語" { // \x80 is an illegal UTF-8 encoding
    fmt.Printf("character %#U starts at byte position %d\n", char, pos)
}

// go 没有逗号操作符，且 ++ -- 是语句而不是表达式，当需要改写多个变量时，请使用 parallel assignment
for i, j := 0, len(a)-1; i < j; i, j = i+1, j-1 {
    a[i], a[j] = a[j], a[i]
}
```
----
=== switch ===
* switch 的 case 表达式不局限于常量或者整数
* 没有默认的 fall-through 行为，如需要，使用 fallthrough 关键字
```go
func unhex(c byte) byte {
    switch {
    case '0' <= c && c <= '9':
        return c - '0'
    case 'a' <= c && c <= 'f':
        return c - 'a' + 10
    case 'A' <= c && c <= 'F':
        return c - 'A' + 10
    }
    return 0
}

// 变量 list，处理需要 fall through 的行为 
func shouldEscape(c byte) bool {
    switch c {
    case ' ', '?', '&', '=', '#', '+', '%':
        return true
    }
    return false
}

// label 配合 break continue
Loop:
	for n := 0; n < len(src); n += size {
		switch {
		case src[n] < sizeOne:
			if validateOnly {
				break
			}
			size = 1
			update(src[n])

		case src[n] < sizeTwo:
			if n+1 >= len(src) {
				err = errShortInput
				break Loop // 跳出 for 循环
			}
			if validateOnly {
				break
			}
			size = 2
			update(src[n] + src[n+1]<<shift)
		}
	}

// Compare returns an integer comparing the two byte slices,
// lexicographically.
// The result will be 0 if a == b, -1 if a < b, and +1 if a > b
func Compare(a, b []byte) int {
    for i := 0; i < len(a) && i < len(b); i++ {
        switch {
        case a[i] > b[i]:
            return 1
        case a[i] < b[i]:
            return -1
        }
    }
    switch {
    case len(a) > len(b):
        return 1
    case len(a) < len(b):
        return -1
    }
    return 0
}

// type switch
var t interface{}   // 类似 C void 类型
t = functionOfSomeType()
switch t := t.(type) {
default:
    fmt.Printf("unexpected type %T\n", t)     // %T prints whatever type t has
case bool:
    fmt.Printf("boolean %t\n", t)             // t has type bool
case int:
    fmt.Printf("integer %d\n", t)             // t has type int
case *bool:
    fmt.Printf("pointer to boolean %t\n", *t) // t has type *bool
case *int:
    fmt.Printf("pointer to integer %d\n", *t) // t has type *int
}
```
----
== Functions ==
=== 传递变长参数 ===
如果函数的最后一个参数是采用 ...type 的形式，那么这个函数就可以处理一个变长的参数，这个长度可以为 0，这样的函数称为变参函数。
```go
func myFunc(a, b, arg ...int) {}
```
如果参数被存储在一个数组 arr 中，则可以通过 arr... 的形式来传递参数调用变参函数。

=== 多返回值 ===
```go
// File 实现 Write 接口
func (file *File) Write(b []byte) (n int, err error)

// 多返回值,函数可以返回任意数量的返回值。

func nextInt(b []byte, i int) (int, int) {
    for ; i < len(b) && !isDigit(b[i]); i++ {
    }
    x := 0 // 等价于： var x = 0，在非全局可以这样简写
    for ; i < len(b) && isDigit(b[i]); i++ {
        x = x*10 + int(b[i]) - '0'
    }
    return x, i
}
```
----
=== 命名返回值 ===
Go 的返回值可以被命名，并且像变量那样使用。
返回值的名称应当具有一定的意义，可以作为文档使用。
命名返回值作为结果形参（result parameters）被初始化为相应类型的零值，当需要返回的时候，我们只需要一条简单的不带参数的return语句。需要注意的是，即使只有一个命名返回值，也需要使用 () 括起来
```go
func ReadFull(r Reader, buf []byte) (n int, err error) { // n, err 可以在函数内直接使用，且初始化为各自类型的 “零值”
    for len(buf) > 0 && err == nil {
        var nr int
        nr, err = r.Read(buf)
        n += nr
        buf = buf[nr:]
    }
    return  // return n, err
}
```
----
=== Defer ===
defer 语句会延迟函数的执行直到上层函数返回。
延迟调用的参数会立刻生成，但是在上层函数返回前函数都不会被调用。
```go
// Contents returns the file's contents as a string.
func Contents(filename string) (string, error) {
    f, err := os.Open(filename)
    if err != nil {
        return "", err
    }
    defer f.Close()  // f.Close will run when we're finished.

    var result []byte
    buf := make([]byte, 100)
    for {
        n, err := f.Read(buf[0:])
        result = append(result, buf[0:n]...) // append is discussed later.
        if err != nil {
            if err == io.EOF {
                break
            }
            return "", err  // f will be closed if we return here.
        }
    }
    return string(result), nil // f will be closed if we return here.
}

//延迟的函数调用被压入一个栈中。当函数返回时， 会按照后进先出的顺序调用被延迟的函数调用。
// 4, 3, 2, 1, 0，注意 defer 的执行位置，是在 for (或函数) 结束后
for i := 0; i < 5; i++ {
    defer fmt.Printf("%d ", i)
}

// 代码追踪
// entering: b
// in b
// entering: a
// in a
// leaving: a
// leaving: b
func trace(s string) string {
    fmt.Println("entering:", s)
    return s
}

func un(s string) {
    fmt.Println("leaving:", s)
}

func a() {
    defer un(trace("a"))
    fmt.Println("in a")
}

func b() {
    defer un(trace("b"))
    fmt.Println("in b")
    a()
}

func main() {
    b()
}
```
----
== 动态创建 ==
=== new ===
```go
type SyncedBuffer struct {
    lock    sync.Mutex
    buffer  bytes.Buffer
}

// new 不做初始化内存（构造函数），仅做内存“零化”
p := new(SyncedBuffer)  // type *SyncedBuffer 
var v SyncedBuffer      // type  SyncedBuffer
```
----
=== 构造 ===
并不是所有的零内存对象都是有意义的，此时需要做初始化操作
```go
func NewFile(fd int, name string) *File {
    if fd < 0 {
        return nil
    }
    f := File{fd, name, nil, 0}
    // f := new(File)
    // f.fd = fd
    // f.name = name
    // f.dirinfo = nil
    // f.nepipe = 0
    return &f  // 进一步简化为： return &File{fd, name, nil, 0}
}

//  arrays, slices, maps 也可以使用 composite literals
a := [...]string   {Enone: "no error", Eio: "Eio", Einval: "invalid argument"}
s := []string      {Enone: "no error", Eio: "Eio", Einval: "invalid argument"}
m := map[int]string{Enone: "no error", Eio: "Eio", Einval: "invalid argument"}
```
----
=== make ===
make 用于创建 array, slice, channel，并返回初始化过的类型
```go
var p *[]int = new([]int)       // allocates slice structure; *p == nil; rarely useful
var v  []int = make([]int, 100) // the slice v now refers to a new array of 100 ints

// Unnecessarily complex:
var p *[]int = new([]int)
*p = make([]int, 100, 100)

// Idiomatic:
v := make([]int, 100)
```
----
== 集合 ==
=== Array ===
Go 数组相比 C 语言的区别：<br>
# 数组是值，赋值时会复制全部元素
# 数组作为参数传递给函数时，不是传入指针，而是一个新拷贝
# 数组 size 是类型的组成部份， [10]int 与 [20]int 是不同的类型
```go
// 如果需要传递指针，要显示声明
func Sum(a *[3]float64) (sum float64) {
    for _, v := range *a {
        sum += v
    }
    return
}

array := [...]float64{7.0, 8.5, 9.1}
x := Sum(&array)  // Note the explicit address-of operator
```
----
=== Slice ===
# Slice 提供了更加普遍、强大的接口去访问顺序数据
# Slice 保存一个指向底层数组的引用，赋值时，左、右值指向同一个数组
# Slice 有 len、cap 两个属性
```go
func (f *File) Read(buf []byte) (n int, err error) {
    var n int
    var err error
    for i := 0; i < 32; i++ {
        nbytes, e := f.Read(buf[i:i+1])  // Read one byte.
        if nbytes == 0 || e != nil {
            err = e
            break
        }
        n += nbytes
    }
}

func Append(slice, data []byte) []byte {
    l := len(slice)
    if l + len(data) > cap(slice) {  // 超出 capacity， 重新分配
        newSlice := make([]byte, (l+len(data))*2)
        // 拷贝原内容
        copy(newSlice, slice)
        slice = newSlice
    }
    slice = slice[0:l+len(data)]
    for i, c := range data {
        slice[l+i] = c
    }
    return slice // 虽然 slice 指向数组，但自身是按值传递，必须返回
}
```
----
=== 二维 Slice ===
Go 语言中， Array 或 Slice 均为一维
```go
type Transform [3][3]float64  // A 3x3 array, really an array of arrays.
type LinesOfText [][]byte     // A slice of byte slices.

// Slice 是可变长度的，因此，可以包含不同长度的二维内容
text := LinesOfText{
	[]byte("Now is the time"),
	[]byte("for all good gophers"),
	[]byte("to bring some fun to the party."),
}
```
创建二维 Slice 的两种方式：
方式一：
```go
// 分配一级 Slice
picture := make([][]uint8, YSize) // YSize 个 []uint8
// 遍历，分配二级 Slice
for i := range picture {
	picture[i] = make([]uint8, XSize)
}
```
方式二：
```go
// 分配一级 Slice
picture := make([][]uint8, YSize) 
// 分配连续的存储
pixels := make([]uint8, XSize*YSize)
// 遍历，二级 Slice 指向连续存储
for i := range picture {
	picture[i], pixels = pixels[:XSize], pixels[XSize:]
}
```
----
=== Map ===
# Key - Value 数据对
# 任何实现了“等于”比较的类型均可以作为 Key
# Map 类似 Slice，存储了指向底层存储结构的引用
```go
// constructed using the composite literal syntax 
var timeZone = map[string]int{
    "UTC":  0*60*60,
    "EST": -5*60*60,
    "CST": -6*60*60,
    "MST": -7*60*60,
    "PST": -8*60*60,
}

// 根据 Key 获取 Value
offset := timeZone["EST"]

// 判断 Key 是否存在，如果存在，同时获取 Value
var seconds int
var ok bool
seconds, ok = timeZone[tz]

// 判断 Key 是否存在，不获取 Value
_, present := timeZone[tz]

// 删除 Key，Key 不存在时也是安全操作
delete(timeZone, "PDT")  // Now on Standard Time
```
----
== 初始化 ==
=== 常量 ===
常量在编译期初始化 
```go
type ByteSize float64

// KB: 1 << 10  iota = 1
// MB: 1 << 20  iota = 2
// GB: 1 << 30  iota = 3
// ...
const (
    _           = iota // iota 从 0 计数，丢弃第一个值
    KB ByteSize = 1 << (10 * iota) // iota 每执行一次，自动加一；表达式隐式执行
    MB
    GB
    TB
    PB
    EB
    ZB
    YB
)

// ByteSize 实现 String() string 接口
func (b ByteSize) String() string {
    switch {
    case b >= YB:
        return fmt.Sprintf("%.2fYB", b/YB)
    case b >= ZB:
        return fmt.Sprintf("%.2fZB", b/ZB)
    case b >= EB:
        return fmt.Sprintf("%.2fEB", b/EB)
    case b >= PB:
        return fmt.Sprintf("%.2fPB", b/PB)
    case b >= TB:
        return fmt.Sprintf("%.2fTB", b/TB)
    case b >= GB:
        return fmt.Sprintf("%.2fGB", b/GB)
    case b >= MB:
        return fmt.Sprintf("%.2fMB", b/MB)
    case b >= KB:
        return fmt.Sprintf("%.2fKB", b/KB)
    }
    return fmt.Sprintf("%.2fB", b)
}
```
----
=== init 函数 ===
# 每一个源文件均可定义自己的 init 函数
# init 函数在一个源文件中可以有多个
# init 函数在 package 内全部变量获取初值后执行
```go
// 除了做初始化，还可以验证、修复错误
func init() {
    if user == "" {
        log.Fatal("$USER not set")
    }
    if home == "" {
        home = "/home/" + user
    }
    if gopath == "" {
        gopath = home + "/go"
    }
    // gopath may be overridden by --gopath flag on command line.
    flag.StringVar(&gopath, "gopath", gopath, "override default GOPATH")
}
```
----
== 指针与变量 ==
# Value Method: Value 或 Pointer 均可调用
# Pointer Method: 仅 Pointer 可调用
# 如果 value 是 adressable 的，那么也可以使用 Pointer Method，只是编译器会将 v.Method 改写为 (&v).Method
```go
type ByteSlice []byte

func (slice ByteSlice) Append(data []byte) []byte {
    // ...
    return slice // 必须要返回，否则所做修改被丢弃
}

func (p *ByteSlice) Append(data []byte) {
    slice := *p
    // ...
    *p = slice // 不再需要返回
}
```
----
== Interface ==
=== Basic ===
# Interfaces in Go provide a way to specify the behavior of an object: if something can do this, then it can be used here.
# A type can implement multiple interfaces. 
```go
type Sequence []int

// Methods required by sort.Interface.
func (s Sequence) Len() int {
    return len(s)
}
func (s Sequence) Less(i, j int) bool {
    return s[i] < s[j]
}
func (s Sequence) Swap(i, j int) {
    s[i], s[j] = s[j], s[i]
}

// Method for printing - sorts the elements before printing.
func (s Sequence) String() string {
    sort.Sort(s)
    str := "["
    for i, elem := range s {
        if i > 0 {
            str += " "
        }
        str += fmt.Sprint(elem)
    }
    return str + "]"
}

// The String method of Sequence is recreating the work that Sprint already does for slices. 
// We can share the effort if we convert the Sequence to a plain []int before calling Sprint.
func (s Sequence) String() string {
    sort.Sort(s)
    return fmt.Sprint([]int(s)) // Sprint 会调用 String 方法，如何解释？
}
```
----
=== 转换 ===
It's an idiom in Go programs to convert the type of an expression to access a different set of methods.
```go
type Sequence []int

// Method for printing - sorts the elements before printing
func (s Sequence) String() string {
    sort.IntSlice(s).Sort()
    return fmt.Sprint([]int(s))
}
```
----
=== Type Assertions ===
```go
type Stringer interface {
    String() string
}

var value interface{} // Value provided by caller.
switch str := value.(type) {
case string:
    return str
case Stringer:
    return str.String()
}

// 只关心 value 是否为 string
str, ok := value.(string)
if ok {
    fmt.Printf("string value is: %q\n", str)
} else {
    fmt.Printf("value is not a string\n")
}

// switch 等效 if-else
if str, ok := value.(string); ok {
    return str
} else if str, ok := value.(Stringer); ok {
    return str.String()
}
```
----
=== Interfaces and Methods ===
```go
type Handler interface {
    ServeHTTP(ResponseWriter, *Request)
}

// Simple counter server.
type Counter struct {
    n int
}

func (ctr *Counter) ServeHTTP(w http.ResponseWriter, req *http.Request) {
    ctr.n++
    fmt.Fprintf(w, "counter = %d\n", ctr.n)
}
```
But why make Counter a struct? An integer is all that's needed. 
```go
// Simpler counter server.
type Counter int

func (ctr *Counter) ServeHTTP(w http.ResponseWriter, req *http.Request) {
    *ctr++
    fmt.Fprintf(w, "counter = %d\n", *ctr)
}
```
考虑如下函数，打印调用时参数，如何变为 HTTP Server 一部分？
```go
func ArgServer() {
    fmt.Println(os.Args)
}
```
```go
// The HandlerFunc type is an adapter to allow the use of
// ordinary functions as HTTP handlers.  If f is a function
// with the appropriate signature, HandlerFunc(f) is a
// Handler object that calls f.
type HandlerFunc func(ResponseWriter, *Request)

// ServeHTTP calls f(c, req).
func (f HandlerFunc) ServeHTTP(w ResponseWriter, req *Request) {
    f(w, req)
}

// Argument server.
func ArgServer(w http.ResponseWriter, req *http.Request) {
    fmt.Fprintln(w, os.Args)
}

http.Handle("/args", http.HandlerFunc(ArgServer))
```
----
== 空标识 ==
=== 多赋值语句 ===
```go
if _, err := os.Stat(path); os.IsNotExist(err) { // 只需要一个返回值时
	fmt.Printf("%s does not exist\n", path)
}
```
----
=== import ===
在 Go 中，未使用的 import 或变量会报错，为了消除错误，可以像下面这样：
```go
package main

import (
    "fmt"
    "io"
    "log"
    "os"
)

var _ = fmt.Printf // fmt 出现，不会报错
var _ io.Reader    // 如果不使用，最好不要导入

func main() {
    fd, err := os.Open("test.go")
    if err != nil {
        log.Fatal(err)
    }
    
    _ = fd // 使用 fd
}
```
----
=== Import for side effect ===
```go
// 导入后，会执行 init 
import _ "net/http/pprof"
```
----
=== Interface check ===
```go
if _, ok := val.(json.Marshaler); ok { 
    fmt.Printf("value %v of type %T implements json.Marshaler\n", val, val)
}
```
----
== Embedding ==
Go does not provide the typical, type-driven notion of subclassing, but it does have the ability to “borrow” pieces of an implementation by embedding types within a struct or interface. <br>
Only interfaces can be embedded within interfaces.
```go
type Reader interface {
    Read(p []byte) (n int, err error)
}

type Writer interface {
    Write(p []byte) (n int, err error)
}

// ReadWriter is the interface that combines the Reader and Writer interfaces.
type ReadWriter interface {
    Reader
    Writer
}
```
The same basic idea applies to structs, but with more far-reaching implications.
```go
/ ReadWriter stores pointers to a Reader and a Writer.
// It implements io.ReadWriter.
type ReadWriter struct {
    *Reader  // *bufio.Reader
    *Writer  // *bufio.Writer
}

// The ReadWriter struct could be written as
type ReadWriter struct {
    reader *Reader
    writer *Writer
}
// 使用时，可以定义 forwarding method
func (rw *ReadWriter) Read(p []byte) (n int, err error) { // 同时也满足 io 接口
    return rw.reader.Read(p)
}
```
There's an important way in which embedding differs from subclassing. When we embed a type, the methods of that type become methods of the outer type, but when they are invoked the receiver of the method is the inner type, not the outer one. 
```go
type Job struct {
    Command string
    *log.Logger
}

func NewJob(command string, logger *log.Logger) *Job {
    return &Job{command, logger}
}

job.Log("starting now...")

// If we need to refer to an embedded field directly, the type name of the field, 
// ignoring the package qualifier, serves as a field name
func (job *Job) Logf(format string, args ...interface{}) {
    job.Logger.Logf("%q: %s", job.Command, fmt.Sprintf(format, args...))
}
```
----