* 可以在服务器、数据库、表和列的层次指定字符集。
==Character Sets 和 Collations==
* Collations 的一般特性
# 两个不同的字符集不能由相同的 collations；
# 每个字符集有一个默认的 collations；
# collations 的名字以字符集名字开头，再加表明一些特性的后缀，如：latin1_swedish_ci；

==Collations 命名约定==
# collation 的名字以字符集名字开头，后面有一个或多个后缀来表明其它特性；
# 特定语言的 collation 包含语言名称；
# collation 可能有大小写敏感、重音敏感或二进制的。对二进制 collations 来说，字符比较是基于字符的二进制码值；对非二进制 collation 名字来说，它不指定重音敏感，而是通过大小写敏感来决定。

==指定字符集和 collation ==
* 有四个层次的字符集和 collation 的默认设置：服务器、数据库、表和列。
* <code>CHARACTER SET</code>用于指定字符集的子句中，<code>CHARSET</code>可作为其同义词使用。
* 字符集问题不仅影响数据存储，还有客户端程序和 MySQL 服务器间的通信。如果想让客户端程序不使用默认的字符集和服务器进行通信，需要进行指定使用哪个字符集。比如想要使用uutf8 unicode 字符集，可以在连接到服务器后执行以下语句：
<source lang='mysql'>
SET NAMES 'utf8';
</source>

===服务器字符集和 collation===
* MySQL 服务器有一个服务器字符集和服务器 collation，这些可以在使用命令行启动服务时设置，或者在选项文件，在 runtime 中更改。
* 最初，服务器字符集和 collation 取决于启动 mysqld 时使用的选项。可以使用<code>--character-set-server</code>指定字符集，紧随其后，使用<code>--collation-server</code>指定 collation。若没有指定字符集，将设置为<code>--character-set-server=latin1</code>。若只指定了字符集而没有指定 collation，collation将被设置为该字符集默认的 collation。以下三条语句的效果一样：
<source lang='mysql'>
mysqld
mysqld --character-set-server=latin1
mysqld --character-set-server=latin1 \
    --collation-server=latin1_swedish_ci
</source>

* 可以通过重新编译来更改设置。当从资源创建时更改默认服务器字符集和 collation，为 CMake 使用<code>DEFAULT_CHARSET</code>和<code>DEFAULT_COLLATION</code>选项，例如：
<source lang='mysql'>
cmake . -DDEFAULT_CHARSET=latin1
</source>
或者：
<source lang='mysql'>
cmake . -DDEFAULT_CHARSET=latin1 \
    -DDEFAULT_COLLATION=latin1_german1_ci
</source>
* 在执行<code>CREATE DATABASE</code>语句时如果没有指定字符集和 collation，将使用默认字符集和 collation。

===数据库字符集和 collation ===
* 每个数据库都有字符集和 collation，<code>CREATE DATABASE</code>和<code>ALTER DATABASE</code>有可选子句来指定字符集和 collation：
<source lang='mysql'>
CREATE DATABASE db_name
    [[DEFAULT] CHARACTER SET charset_name]
    [[DEFAULT] COLLATE collation_name]

ALTER DATABASE db_name
    [[DEFAULT] CHARACTER SET charset_name]
    [[DEFAULT] COLLATE collation_name]
</source>
* 关键字<code>SCHEMA</code>可以用来替代<code>DATABASE</code>.
* <code>CHARACTER SET</code>和<code>COLLATE</code>子句可以实现在同一个 MySQL 服务器中用不同的字符集和 collation 创建数据库，如下：
<source lang='mysql'>
CREATE DATABASE db_name CHARACTER SET latin1 COLLATE latin1_swedish_ci;
</source>
* MySQL 按照以下规则来选择数据库的字符集和 collation：
# 若字符集和 collation 都指定了，则使用指定的值；
# 若只指定了字符集，则使用指定的字符集和该字符集默认的 collation；
# 若只指定了 collation，将使用与该 collation 相关的字符集以及该 collation；
# 若均未指定，将使用服务器的字符集以及 collation。
* 默认数据库的字符集和 collation 由系统变量<code>character_set_database</code>和<code>collation_database</code>的值决定。当默认数据库改变时，服务器将设置这些变量。若没有默认的数据库，这些变量将和相应的服务器层级的系统变量的值相同，即<code>character_set_server</code> 和 <code>collation_server</code>。
* 查看一个数据库的默认字符集和 collation，使用如下语句：
<source lang='mysql'>
USE db_name;
SELECT @@character_set_database, @@collation_database;
</source>
* 或者，在不改变默认数据库的情况下显示值：
<source lang='mysql'>
SELECT DEFAULT_CHARACTER_SET_NAME, DEFAULT_COLLATION_NAME
FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = 'db_name';
</source>
* 数据库字符集和 collation 影响服务器操作的这些部分：
# 对于<code>CREATE TABLE</code>语句，若表没有指定字符集和 collation，数据库的字符集和 collation 将被用作表的默认值。要重写这些的话，提供了显式的字符集和 collation 表选项。
# 对于不包含<code>CHARACTER SET</code>子句的<code>LOAD DATA</code>语句，服务器使用通过在文件中解释信息的<code>character_set_database</code>系统变量指明的字符集。提供了一个显式的<code>CHARACTER SET</code>子句来重写它。
# 对于存储的程序？？？？？？？

===表的字符集和 collation===
* 每个表都有表的字符集和 collation，<code>CREATE TABLE</code>和<code>ALTER TABLE</code>语句有可选子句来指定字符集和 collation：
<source lang='mysql'>
CREATE TABLE tbl_name (column_list)
    [[DEFAULT] CHARACTER SET charset_name]
    [COLLATE collation_name]]

ALTER TABLE tbl_name
    [[DEFAULT] CHARACTER SET charset_name]
    [COLLATE collation_name]
</source>
例如：
<source lang='mysql'>
CREATE TABLE t1 ( ... )
CHARACTER SET latin1 COLLATE latin1_danish_ci;
</source>
* MySQL 选择表的字符集和 collation 时遵守的规则和选择数据库字符集和 collation 时遵守的规则基本一致，区别只是：选择表的字符集和 collation时，如果都没有指定，则默认使用该数据库的字符集和 collation。
* 若单独的列定义时没有指定其字符集和 collation，则表的字符集和 collation 将用作其默认值。
* 表的字符集和 collation 是 MySQL 扩展，标准的 SQL 中没有这样的内容。

===列的字符集和 collation===
* 每一个字符列（即列的类型是 CHAR, VARCHAR, 或 TEXT）有一个列字符集和列 collation。
* <code>CREATE TABLE</code> 和 <code>ALTER TABLE</code> 的列定义语法有用来指定列的字符集和 collation 的可选子句：
<source lang='mysql'>
col_name {CHAR | VARCHAR | TEXT} (col_length)
    [CHARACTER SET charset_name]
    [COLLATE collation_name]
</source>
这些子句也可用于<code>ENUM</code> 和 <code>SET</code>列：
<source lang='mysql'>
col_name {ENUM | SET} (val_list)
    [CHARACTER SET charset_name]
    [COLLATE collation_name]
</source>
使用示例如下：
<source lang='mysql'>
CREATE TABLE t1
(
    col1 VARCHAR(5)
      CHARACTER SET latin1
      COLLATE latin1_german1_ci
);

ALTER TABLE t1 MODIFY
    col1 VARCHAR(5)
      CHARACTER SET latin1
      COLLATE latin1_swedish_ci;
</source>
* MySQL 选择列字符集和 collation 的规则基本与选择表的字符集和 collation 一致，区别只是：选择列的字符集和 collation时，如果都没有指定，则默认使用该表的字符集和 collation
# 若字符集和 collation 都指定的情况，则使用指定值：
<source lang='mysql'>
CREATE TABLE t1
(
    col1 CHAR(10) CHARACTER SET utf8 COLLATE utf8_unicode_ci
) CHARACTER SET latin1 COLLATE latin1_bin;
</source>
# 都没有指定的情况，则使用表的对应值，下例中列的字符集和 collation 分别是 latin1 和 latin1_bin：
<source lang='mysql'>
CREATE TABLE t1
(
    col1 CHAR(10)
) CHARACTER SET latin1 COLLATE latin1_bin;
</source>
* <codeCHARACTER SET</code> 和 <code>COLLATE</code>子句是标准的 SQL。
* 若使用<code>ALTER TABLE</code>来转换列的字符集，MySQL 将试图映射数据的值，但如果字符集不兼容，就可能有数据丢失。

===字符字符串的字符集和 collation===
* 每一个字符字符串都有字符集和 collation。
* 一个字符字符串可以有一个可选的字符集 introducer 和 COLLATE 子句，<code>_charset_name</code>表达式正式称为 introducer，示例：
<source lang='mysql'>
[_charset_name]'string' [COLLATE collation_name]

SELECT 'string';
SELECT _latin1'string';
SELECT _latin1'string' COLLATE latin1_danish_ci;
</source>
* 对于<code>SELECT 'string';</code>这条语句来说，'string' 的字符集和 collation 是系统变量<code>character_set_connection</code> 和 <code>collation_connection</code>定义的。
* 一个 introducer 不像  CONVERT() 那样将字符串的字符集更改为 introducer 的字符集，它不改变字符串的值，introducer 仅仅是一个信号。introducer 在x'literal' 和 0xnnnn 前，或 b'literal' 和 0bnnnn 类型前也是合法的，例如：
<source lang='mysql'>
SELECT _latin1 x'AABBCC';
SELECT _latin1 0xAABBCC;
SELECT _latin1 b'1100011';
SELECT _latin1 0b1100011;
</source>
* MySQL 根据确定字符字符串的字符集和 collation的规则和以上基本一致，除了字符集和 collation 都不指定的情况： 将使用<code>character_set_connection</code> 和 <code>collation_connection</code>的值作为字符集和 collation 的值。
* 字符集 introducer 和 COLLATE 子句是根据标准SQL规则来执行的。
* introducer 为后面的字符串指定字符集，但并不改变现在分析器如何执行字符串的转义处理。转义永远由分析器根据<code>character_set_connection</code>提供给分析器的字符集值来解释。
* 下例展示在有 introducer 出现的情况下使用<code>character_set_connection</code>的值进行转义处理。这个例子使用<code>SET NAMES</code>来更改<code>character_set_connection</code>，使用<code>HEX()</code>显示生成的字符串：
<source lang='mysql'>
mysql> SET NAMES latin1;
Query OK, 0 rows affected (0.01 sec)

mysql> SELECT HEX('à\n'), HEX(_sjis'à\n');
+------------+-----------------+
| HEX('à\n') | HEX(_sjis'à\n') |
+------------+-----------------+
| E00A       | E00A            |
+------------+-----------------+
1 row in set (0.00 sec)
</source>
这个例子中，E0后面跟着 \n 换行转义序列（0A），第二个字符串虽然指定了 introducer（_sjis），但没有影响分析器的转义处理，分析器还是使用 <code>character_set_connection</code>的值来生成新行。
* 例2:
<source lang='mysql'>
mysql> SET NAMES sjis;
Query OK, 0 rows affected (0.00 sec)

mysql> SELECT HEX('à\n'), HEX(_latin1'à\n');
+------------+-------------------+ 
| HEX('à\n') | HEX(_latin1'à\n') |
+------------+-------------------+
| E05C6E     | E05C6E            |
+------------+-------------------+
1 row in set (0.04 sec)
</source>
这个例子中<code>character_set_connection</code>是 sjis，à 的序列中的字符集后面跟着 \ 是有效的多字节字符。字符串的头两个字节被解释为单 sjis 字符，\ 没有被解释为转义字符。后面的 n 没有被解释为转义序列的一部分。第二个字符串也一样，introducer（_latin1） 没有影响转义序列处理。

===本地字符集===
* 标准 SQL 定义<code>NCHAR</code> 或 <code>NATIONAL CHAR</code>作为一种方法来指出一个<code>CHAR</code>列应该使用预定义字符集。MySQL 使用 utf8 作为这个预定义的字符集。如下例，这些数据类型声明是等效的：
<source lang='mysql'>
CHAR(10) CHARACTER SET utf8
NATIONAL CHARACTER(10)
NCHAR(10)

VARCHAR(10) CHARACTER SET utf8
NATIONAL VARCHAR(10)
NVARCHAR(10)
NCHAR VARCHAR(10)
NATIONAL CHARACTER VARYING(10)
NATIONAL CHAR VARYING(10)
</source>
* 在本地字符集中可以使用 <code>N'literal'</code> (或 n'literal') 来创建字符串，以下语句是等效的：
<source lang='mysql'>
SELECT N'some text';
SELECT n'some text';
SELECT _utf8'some text';
</source>

===分配字符集和 collation 的例子===
* 以下例子展示 MySQL 如何确定默认的字符集和 collation 值。
* 例1，表和列定义：
<source lang='mysql'>
CREATE TABLE t1
(
    c1 CHAR(10) CHARACTER SET latin1 COLLATE latin1_german1_ci
) DEFAULT CHARACTER SET latin2 COLLATE latin2_bin;
</source>
这个例子中创建了一个字符集是 latin1 ，collation 是 latin1_german1_ci 的列。注意在 latin2 表中创建 latin1 的列是没问题的。
* 例2，表和列定义：
<source lang='mysql'>
CREATE TABLE t1
(
    c1 CHAR(10) CHARACTER SET latin1
) DEFAULT CHARACTER SET latin1 COLLATE latin1_danish_ci;
</source>
这个例子中的列只指定了 latin1 字符集，列的 collation 将设置为 latin1 默认的 latin1_swedish_ci，而不是根据表层级的 collation来设置。
* 例3，表和列定义：
<source lang='mysql'>
CREATE TABLE t1
(
    c1 CHAR(10)
) DEFAULT CHARACTER SET latin1 COLLATE latin1_danish_ci;
</source>
这个例子中，列的字符集和 collation 将使用默认的设置，MySQL 将检查表层级的字符集和 collation 来决定列的对应值。
* 例4，数据库、表和列的定义：
<source lang='mysql'>
CREATE DATABASE d1
    DEFAULT CHARACTER SET latin2 COLLATE latin2_czech_ci;
USE d1;
CREATE TABLE t1
(
    c1 CHAR(10)
);
</source>
这个例子中没有指定表和列层级的字符集及 collation，MySQL先检查数据库层级的字符集和 collation 来决定表的对应值，随后将其设置为列的对应值。

==connection 的字符集和 collation==
* 一些字符集和 collation 系统变量涉及到客户端和服务器的交互，如之前提到的<code>character_set_server</code>和<code>character_set_database</code>。
* 在处理客户端和服务器的连接时，还涉及到附加的字符集和 collation 的处理。每个客户端都有连接相关的字符集和 collation 系统变量。
* 一个 "connection" 是当你连接到服务器时做的事情。客户端发送 SQL 语句（比如查询），通过这个 "connection" 到达服务器，服务器也通过这个 "connection" 将响应发送回客户端。这导致关于客户端 "connection" 的字符集和 collation 处理的一些问题：
# 问题：当离开客户端时，语句中声明的是什么字符集？回答：在客户端发送的那些语句中，服务器以<code>character_set_client</code>系统变量作为字符集。
# 问题：在接收到它以后，服务器应该将这些语句翻译成什么字符集？回答：对此，服务器使用<code>character_set_connection</code> 和 <code>collation_connection</code>系统变量。它将客户端发送的语句从<code>character_set_client</code>转换为<code>character_set_connection</code>（除非字符串有一个 introducer，比如_latin1 或 _utf8）。<code>collation_connection</code>对于字符串的比较是重要的。但对于比较列中字符串的值，<code>collation_connection</code>不重要，因为列的 collation 具有更高的优先权。
# 问题：在传送结果集或错误消息到客户端之前，服务器将翻译成什么字符集？回答：服务器返回查询结果给客户端时由<code>character_set_results</code>系统变量指示字符集。这包括结果数据，比如列的值；还有结果元数据，比如列名和错误消息。
* 客户端可以微调这些变量的设置，或依赖于默认值。如果不使用默认值，必须更改每个连接到服务器的字符设置。
* 两条语句作为一个组影响与 connection 相关的变量：
* <code>SET NAMES 'charset_name' [COLLATE 'collation_name']</code>
<code>SET NAMES</code>指示客户端将要使用什么字符集来发送 SQL 语句到服务器。这也指定服务器将结果返回给客户端应该使用什么字符集。比如，如果使用一条<code>SELECT</code>语句，它将指定列的值使用什么字符集。
一条<code>SET NAMES 'charset_name'</code>语句等效于以下三条语句：
<source lang='mysql'>
SET character_set_client = charset_name;
SET character_set_results = charset_name;
SET character_set_connection = charset_name;
</source>
将<code>character_set_connection</code>设置为<code>charset_name</code>也是隐式的将<code>collation_connection</code>设置为<code>charset_name</code>默认的 collation。collation 不需要显式的设置，可以使用可选的<code>COLLATE</code>子句来指定 collation：<code>SET NAMES 'charset_name' COLLATE 'collation_name'</code>。
* <code>SET CHARACTER SET charset_name</code>
<code>SET CHARACTER SET</code>类似于<code>SET NAMES</code>，而不是将<code>character_set_connection</code> 和 <code>collation_connection</code> 设置为 <code>character_set_database</code> 和 <code>collation_database</code>。一条<code>SET CHARACTER SET charset_name</code>语句等效于以下三条语句：
<source lang='mysql'>
SET character_set_client = charset_name;
SET character_set_results = charset_name;
SET collation_connection = @@collation_database;
</source>
设置<code>collation_connection</code>也是隐式的设置<code>character_set_connection</code>，以设置与 collation 相符的字符集（相当于执行<code>SET character_set_connection = @@character_set_database</code>）。没必要显式的设置<code>character_set_connection</code>。
* 注意：ucs2, utf16, utf16le, 和 utf32 不能作为客户端字符集，意思就是他们在<code>SET NAMES</code> 或 <code>SET CHARACTER SET</code>中不工作。
* MySQL 客户端程序mysql, mysqladmin, mysqlcheck, mysqlimport, 和 mysqlshow 确定默认字符集使用如下：
# 在缺乏其它信息的情况下，程序使用已编译的默认字符集，通常是 latin1。
# 应用程序能基于操作系统设置自动检测使用什么字符集。
# 应用程序支持<code>--default-character-set</code>选项，它运行用户显式的指定字符集，以覆盖客户端默认情况下的配置。
* 当一个客户端连接到服务器时，将它想使用的字符集名字发送给服务器。服务器使用这个名字来设置系统变量 character_set_client、character_set_results 和 character_set_connection 的值。实际上，服务器使用这个字符集名字执行了一次<code>SET NAMES</code>操作。
* 对于 mysql 客户端，想要使用非默认的字符集，可以在每次启动时执行<code>SET NAMES</code>命令。但更简单的方法是在 mysql 命令行或选项文件中添加<code>--default-character-set</code>选项。例如，在选项文件中添加以下命令，在每次调用 mysql 时来将三个连接相关的字符集变量设置为 koi8r：
<source lang='python'>
[mysql]
default-character-set=koi8r
</source>
* 如果使用允许自动重连功能的 mysql 客户端（不推荐的方式），最好使用<code>charset</code>命令而不是<code>SET NAMES</code>命令：
<source lang='python'>
mysql> charset utf8
Charset changed
</source>
<code>charset</code>命令发出一个<code>SET NAMES</code>语句，也改变了 mysql 在连接 drop 后重连时使用的默认字符集。
例如：假设 column1 定义为 CHAR(5) CHARACTER SET latin2。如果没有执行<code>SET NAMES</code> 或 <code>SET CHARACTER SET</code>语句就执行了<code> SELECT column1 FROM t</code>语句，则服务器将使用客户端连接时指定的字符集来返回所有 column1 的值。另一方面，如果在执行<code>SELECT</code>语句前就执行<code>SET NAMES 'latin1'</code> 或 <code>SET CHARACTER SET latin1</code>语句，服务器将在返回值前将 latin2 值转换为 latin1 值。如果想让服务器不执行结果集或错误消息的转换，可以将<code>character_set_results</code>设置为 NULL 或 binary：<code>SET character_set_results = NULL;</code>。
* 查看应用于你的连接的字符集和 collation 系统变量的值，使用以下语句：
<source lang='python'>
SHOW VARIABLES LIKE 'character_set%';
SHOW VARIABLES LIKE 'collation%';
</source>

==为应用程序配置字符集和 collation==
* 应用使用 MySQL 默认的字符集和 collation 来存储数据（latin1, latin1_swedish_ci）。有以下几种方式来使用不同的字符集和 collation：
# 指定每个数据库的字符设置。
# 在服务器启动时指定字符设置。这将导致服务器为所有的应用程序使用给定的设置。
# 在配置时指定字符设置，如果从资源来创建 MySQL。这将导致服务器为所有的应用程序使用给定的设置，而不必从启动时指定它们。
* 应用程序必须告诉服务器使用哪一个字符集用于客户端/服务器通信。
* 创建一个数据库：
<source lang='python'>
CREATE DATABASE mydb
  DEFAULT CHARACTER SET utf8
  DEFAULT COLLATE utf8_general_ci;
</source>
在数据库中创建的表将为任何字符列默认使用utf8 和 utf8_general_ci。使用这个数据库的应用程序也应该在每次连接时配置它们到服务器的连接，这可以通过在连接后执行<code>SET NAMES 'utf8'</code>语句来实现。
*如果更改一个数据库的默认字符集或 collation，使用数据库的存储程序默认必须先 drop 然后重新创建，才能使用新的默认值。
* 在启动服务器时指定字符设置。使用<code>--character-set-server</code> 和 <code>--collation-server</code>选项，或在选项文件中添加如下行：
<source lang='python'>
[mysqld]
character-set-server=utf8
collation-server=utf8_general_ci
</source>
这些设置适用于服务器范围，并将其应用于任何应用程序创建的数据库的默认值，并用于在这些数据库中创建的表。
使用<code>SET NAMES</code>或连接后的等效方法为应用程序配置它们的连接仍然时有必要的。
* 在MySQL配置时间指定字符设置。当你从资源配置和创建MySQL时来选择字符集和 collation，为 CMAKE 使用<code>DEFAULT_CHARSET</code> 和 <code>DEFAULT_COLLATION</code>选项：
<source lang='python'>
shell> cmake . -DDEFAULT_CHARSET=utf8 \
           -DDEFAULT_COLLATION=utf8_general_ci
</source>
由此产生的服务器使用 utf8 和 utf8_general_ci 作为数据库、表、客户端连接的默认值。没有必要在服务器启动时使用<code>--character-set-server</code> 和 <code>--collation-server</code>指定这些默认值。也没有必要在应用程序连接到服务器后使用<code>SET NAMES</code>或等效方法来配置它们的连接。
* 不管如何为应用程序配置其使用的MySQL字符集，还必须考虑这些应用程序执行的环境。如果你将使用 UTF-8 文本从一个在编辑器中创建的文件发送发送语句，你也应该在设置成 UTF-8 的环境中编辑这个文件，以便文件编码是正确的并且操作系统可以正确处理它。